#include "Poco/Util/Application.h"
#include "Poco/Data/SessionFactory.h"
#include "Poco/Data/SQLite/Connector.h"
#include "Poco/Data/TypeHandler.h"

#include "MQ/Web/Dictionary.h"

#include <cmqcfc.h>
#include <cmqxc.h>
#include <cmqzc.h>

using namespace MQ::Web;
using namespace Poco::Data::Keywords;

#define MQCONST2STR(x) (x, #x)

Dictionary queueManagerDictionary = Dictionary()
	(MQIA_ACCOUNTING_CONN_OVERRIDE, "AccountingConnOverride", DisplayMapInitializer
		(MQMON_DISABLED, "Disabled")
		(MQMON_ENABLED, "Enabled")
	)
	(MQIA_ACCOUNTING_INTERVAL, "AccountingInterval")
	(MQIA_ACTIVITY_CONN_OVERRIDE, "ActivityConnOverride", DisplayMapInitializer
		(MQMON_DISABLED, "Disabled")
		(MQMON_ENABLED, "Enabled")
	)
	(MQIA_ACTIVITY_RECORDING, "ActivityRecording", DisplayMapInitializer
		(MQRECORDING_DISABLED, "Disabled")
		(MQRECORDING_MSG, "Msg")
		(MQRECORDING_Q, "Queue")
	)
	(MQIA_ACTIVITY_TRACE, "ActivityTrace", DisplayMapInitializer
		(MQMON_OFF, "Off")
		(MQMON_ON, "On")
	)
	(MQIA_ADOPTNEWMCA_CHECK, "AdoptNewMCACheck", DisplayMapInitializer
		(MQADOPT_CHECK_Q_MGR_NAME, "QmgrName")
		(MQADOPT_CHECK_NET_ADDR, "NetAddr")
		(MQADOPT_CHECK_ALL, "All")
		(MQADOPT_CHECK_NONE, "None")
	)
	(MQIA_ADOPTNEWMCA_TYPE, "AdoptNewMCAType", DisplayMapInitializer
		(MQADOPT_TYPE_NO, "No")
		(MQADOPT_TYPE_ALL, "All")
	)
	(MQCA_ALTERATION_DATE, "AlterationDate")
	(MQCA_ALTERATION_TIME, "AlterationTime")
	(MQIA_AUTHORITY_EVENT, "AuthorityEvent", DisplayMapInitializer
		(MQEVR_DISABLED, "Disabled")
		(MQEVR_ENABLED, "Enabled")
	)
	(MQIA_BRIDGE_EVENT, "BridgeEvent", DisplayMapInitializer
		(MQEVR_DISABLED, "Disabled")
		(MQEVR_ENABLED, "Enabled")
	)
#ifdef MQIA_CERT_VAL_POLICY
	(MQIA_CERT_VAL_POLICY, "CertificateValPolicy", DisplayMapInitializer
		(MQ_CERT_VAL_POLICY_ANY, "Policy Any")
		(MQ_CERT_VAL_POLICY_RFC5280, "Policy RFC5280")
	)
#endif
	(MQIA_QMGR_CFCONLOS, "CFConlos", DisplayMapInitializer
		(MQCFCONLOS_TERMINATE, "Terminate")
		(MQCFCONLOS_TOLERATE, "Tolerate")
	)
	(MQIA_CHANNEL_AUTO_DEF, "ChannelAutoDef", DisplayMapInitializer
		(MQCHAD_DISABLED, "Disabled")
		(MQCHAD_ENABLED, "Enabled")
	)
	(MQIA_CHANNEL_AUTO_DEF_EVENT, "ChannelAutoDefEvent", DisplayMapInitializer
		(MQEVR_DISABLED, "Disabled")
		(MQEVR_ENABLED, "Enabled")
	)
	(MQCA_CHANNEL_AUTO_DEF_EXIT, "ChannelAutoDefExit")
	(MQIA_CHLAUTH_RECORDS, "ChannelAuthenticationRecords", DisplayMapInitializer
		(MQCHLA_DISABLED, "Disabled")
		(MQCHLA_ENABLED, "Enabled")
	)
	(MQIA_CHANNEL_EVENT, "ChannelEvent", DisplayMapInitializer
		(MQEVR_DISABLED, "Disabled")
		(MQEVR_ENABLED, "Enabled")
		(MQEVR_EXCEPTION, "Exception")
	)
	(MQIA_CHINIT_CONTROL, "ChannelInitiatorControl", DisplayMapInitializer
		(MQSVC_CONTROL_MANUAL, "Manual")
		(MQSVC_CONTROL_Q_MGR, "Qmgr")
		)
	(MQIA_MONITORING_CHANNEL, "ChannelMonitoring", DisplayMapInitializer
		(MQMON_NONE, "None")
		(MQMON_Q_MGR, "Qmgr")
		(MQMON_OFF, "Off")
		(MQMON_LOW, "Low")
		(MQMON_MEDIUM, "Medium")
		(MQMON_HIGH, "High")
	)
	(MQIA_STATISTICS_CHANNEL, "ChannelStatistics", DisplayMapInitializer
		(MQMON_NONE, "None")
		(MQMON_Q_MGR, "Qmgr")
		(MQMON_OFF, "Off")
		(MQMON_LOW, "Low")
		(MQMON_MEDIUM, "Medium")
		(MQMON_HIGH, "High")
	)
	(MQIA_CHINIT_ADAPTERS, "ChinitAdapters")
	(MQIA_CHINIT_DISPATCHERS, "ChinitDispatchers")
	(MQCA_CHINIT_SERVICE_PARM, "ChinitServiceParm")
	(MQIA_CHINIT_TRACE_AUTO_START, "ChinitTraceAutoStart", DisplayMapInitializer
		(MQTRAXSTR_YES, "Yes")
		(MQTRAXSTR_NO, "No")
	)
	(MQIA_CHINIT_TRACE_TABLE_SIZE, "ChinitTraceTableSize")
	(MQIA_MONITORING_AUTO_CLUSSDR, "ClusterSenderMonitoringDefault", DisplayMapInitializer
		(MQMON_Q_MGR, "Qmgr")
		(MQMON_OFF, "Off")
		(MQMON_LOW, "Low")
		(MQMON_MEDIUM, "Medium")
		(MQMON_HIGH, "High")
	)
	(MQIA_STATISTICS_AUTO_CLUSSDR, "ClusterSenderStatistics", DisplayMapInitializer
		(MQMON_Q_MGR, "Qmgr")
		(MQMON_OFF, "Off")
		(MQMON_LOW, "Low")
		(MQMON_MEDIUM, "Medium")
		(MQMON_HIGH, "High")
	)
	(MQCA_CLUSTER_WORKLOAD_DATA, "ClusterWorkLoadData")
	(MQCA_CLUSTER_WORKLOAD_EXIT, "ClusterWorkLoadExit")
	(MQIA_CLUSTER_WORKLOAD_LENGTH, "ClusterWorkLoadLength")
	(MQIA_CLWL_MRU_CHANNELS, "CLWLMRUChannels")
	(MQIA_CLWL_USEQ, "CLWLUseQ", DisplayMapInitializer
		(MQCLWL_USEQ_ANY, "Any")
		(MQCLWL_USEQ_LOCAL, "Local")
		(MQCLWL_USEQ_AS_Q_MGR, "AsQMgr")
	)
	(MQIA_CODED_CHAR_SET_ID, "CodedCharSetID")
	(MQIA_COMMAND_EVENT, "CommandEvent", DisplayMapInitializer
		(MQEVR_DISABLED, "Disabled")
		(MQEVR_ENABLED, "Enabled")
		(MQEVR_NO_DISPLAY, "NoDisplay")
	)
	(MQCA_COMMAND_INPUT_Q_NAME, "CommandInputQName")
	(MQIA_COMMAND_LEVEL, "CommandLevel", DisplayMapInitializer
		(MQCMDL_LEVEL_1, "Level 1")
		(MQCMDL_LEVEL_101, "Level 101")
		(MQCMDL_LEVEL_110, "Level 110")
		(MQCMDL_LEVEL_200, "Level 200")
		(MQCMDL_LEVEL_220, "Level 220")
		(MQCMDL_LEVEL_221, "Level 221")
		(MQCMDL_LEVEL_320, "Level 320")
		(MQCMDL_LEVEL_420, "Level 420")
		(MQCMDL_LEVEL_500, "Level 500")
		(MQCMDL_LEVEL_510, "Level 510")
		(MQCMDL_LEVEL_520, "Level 520")
		(MQCMDL_LEVEL_530, "Level 530")
		(MQCMDL_LEVEL_531, "Level 531")
		(MQCMDL_LEVEL_600, "Level 600")
		(MQCMDL_LEVEL_700, "Level 700")
		(MQCMDL_LEVEL_701, "Level 701")
		(MQCMDL_LEVEL_710, "Level 710")
	)
	(MQIA_CMD_SERVER_CONTROL, "CommandServerControl", DisplayMapInitializer
		(MQSVC_CONTROL_MANUAL, "Manual")
		(MQSVC_CONTROL_Q_MGR, "Qmgr")
	)
	(MQIA_CONFIGURATION_EVENT, "ConfigurationEvent", DisplayMapInitializer
		(MQEVR_DISABLED, "Disabled")
		(MQEVR_ENABLED, "Enabled")
	)
	(MQCA_CREATION_DATE, "CreationDate")
	(MQCA_CREATION_TIME, "CreationTime")
	(MQCA_CUSTOM, "Custom")
	(MQCA_DEAD_LETTER_Q_NAME, "DeadLetterQName")
#ifdef MQIA_DEF_CLUSTER_XMIT_Q_TYPE
	(MQIA_DEF_CLUSTER_XMIT_Q_TYPE, "DefClusterXmitQueueType", DisplayMapInitializer
		(MQCLXQ_SCTQ, "SCTQ")
		(MQCLXQ_CHANNEL, "Channel")
	)
#endif
	(MQCA_DEF_XMIT_Q_NAME, "DefXmitQName")
	(MQIA_DIST_LISTS, "DistLists", DisplayMapInitializer
		(MQDL_SUPPORTED, "Supported")
		(MQDL_NOT_SUPPORTED, "Not Supported")
	)
	(MQCA_DNS_GROUP, "DNSGroup")
	(MQIA_DNS_WLM, "DNSWLM", DisplayMapInitializer
		(MQDNSWLM_YES, "Yes")
		(MQDNSWLM_NO, "No")
	)
	(MQIA_SUITE_B_STRENGTH, "EncryptionPolicySuiteB", DisplayMapInitializer
		(MQ_SUITE_B_NONE, "None")
		(MQ_SUITE_B_128_BIT, "128 Bit")
		(MQ_SUITE_B_192_BIT, "192 Bit")
	)
	(MQIA_EXPIRY_INTERVAL, "ExpiryInterval")
	(MQIA_GROUP_UR, "GroupUR", DisplayMapInitializer
		(MQGUR_DISABLED, "Disabled")
		(MQGUR_ENABLED, "Enabled")
	)
	(MQIA_IGQ_PUT_AUTHORITY, "IGQPutAuthority", DisplayMapInitializer
		(MQIGQPA_DEFAULT, "Default")
		(MQIGQPA_CONTEXT, "Context")
		(MQIGQPA_ONLY_IGQ, "Only IGQ")
		(MQIGQPA_ALTERNATE_OR_IGQ, "Alternate or IGQ")
	)
	(MQCA_IGQ_USER_ID, "IGQUserId")
	(MQIA_INHIBIT_EVENT, "InhibitEvent", DisplayMapInitializer
		(MQEVR_DISABLED, "Disabled")
		(MQEVR_ENABLED, "Enabled")
	)
	(MQIA_INTRA_GROUP_QUEUING, "IntraGroupQueueing", DisplayMapInitializer
		(MQIGQ_DISABLED, "Disabled")
		(MQIGQ_ENABLED, "Enabled")
	)
	(MQIA_IP_ADDRESS_VERSION, "IPAddressVersion", DisplayMapInitializer
		(MQIPADDR_IPV4, "IPV4")
		(MQIPADDR_IPV6, "IPV6")
	)
	(MQIA_LISTENER_TIMER, "ListenerTimer")
	(MQIA_LOCAL_EVENT, "LocalEvent", DisplayMapInitializer
		(MQEVR_DISABLED, "Disabled")
		(MQEVR_ENABLED, "Enabled")
	)
	(MQIA_LOGGER_EVENT, "LoggerEvent", DisplayMapInitializer
		(MQEVR_DISABLED, "Disabled")
		(MQEVR_ENABLED, "Enabled")
	)
	(MQCA_LU_GROUP_NAME, "LUGroupName")
	(MQCA_LU_NAME, "LUName")
	(MQCA_LU62_ARM_SUFFIX, "LU62ARMSuffix")
	(MQIA_LU62_CHANNELS, "LU62Channels")
	(MQIA_ACTIVE_CHANNELS, "MaxActiveChannels")
	(MQIA_MAX_CHANNELS, "MaxChannels")
	(MQIA_MAX_HANDLES, "MaxHandles")
	(MQIA_MAX_MSG_LENGTH, "MaxMsgLength")
	(MQIA_MAX_PRIORITY, "MaxPriority")
	(MQIA_MAX_PROPERTIES_LENGTH, "MaxPropertiesLength")
	(MQIA_MAX_UNCOMMITTED_MSGS, "MaxUncommitedMsgs")
	(MQIA_ACCOUNTING_MQI, "MQIAccounting", DisplayMapInitializer
		(MQMON_OFF, "Off")
		(MQMON_ON, "On")
	)
	(MQIA_STATISTICS_MQI, "MQIStatistics", DisplayMapInitializer
		(MQMON_OFF, "Off")
		(MQMON_ON, "On")
	)
	(MQIA_MSG_MARK_BROWSE_INTERVAL, "MsgMarkBrowseInterval")
	(MQIA_OUTBOUND_PORT_MAX, "OutBoundPortMax")
	(MQIA_OUTBOUND_PORT_MIN, "OutBoundPortMin")
	(MQCA_PARENT, "Parent")
	(MQIA_PERFORMANCE_EVENT, "LoggerEvent", DisplayMapInitializer
		(MQEVR_DISABLED, "Disabled")
		(MQEVR_ENABLED, "Enabled")
	)
	(MQIA_PLATFORM, "Platform", DisplayMapInitializer
		(MQPL_UNIX, "UNIX")
		(MQPL_NSK, "Compaq NonStop Kernel")
		(MQPL_OS400, "i5/OS")
		(MQPL_VMS, "HP OpenVMS")
		(MQPL_WINDOWS_NT, "Windows")
		(MQPL_ZOS, "z/OS")
	)
#ifdef MQIA_PROT_POLICY_CAPABILITY
	(MQIA_PROT_POLICY_CAPABILITY, "SplCap", DisplayMapInitializer
		(MQCAP_SUPPORTED, "Supported")
		(MQCAP_NOT_SUPPORTED, "Not Supported")
	)
#endif
	(MQIA_PUBSUB_CLUSTER, "PubSubClus", DisplayMapInitializer
		(MQPSCLUS_ENABLED, "Enabled")
		(MQPSCLUS_DISABLED, "Disabled")
	)
	(MQIA_PUBSUB_MAXMSG_RETRY_COUNT, "PubSubMaxMsgRetryCount")
	(MQIA_PUBSUB_MODE, "PubSubMode", DisplayMapInitializer
		(MQPSM_COMPAT, "Compat")
		(MQPSM_DISABLED, "Disabled")
		(MQPSM_ENABLED, "Enabled")
	)
	(MQIA_PUBSUB_NP_MSG, "PubSubNPInputMsg", DisplayMapInitializer
		(MQUNDELIVERED_DISCARD, "Discard")
		(MQUNDELIVERED_KEEP, "Keep")
	)
	(MQIA_PUBSUB_NP_RESP, "PubSubNPResponse", DisplayMapInitializer
		(MQUNDELIVERED_NORMAL, "Normal")
		(MQUNDELIVERED_SAFE, "Safe")
		(MQUNDELIVERED_DISCARD, "Discard")
		(MQUNDELIVERED_KEEP, "Keep")
	)
	(MQIA_PUBSUB_SYNC_PT, "PubSubSyncPoiunt", DisplayMapInitializer
		(MQSYNCPOINT_IFPER, "IFPER")
		(MQSYNCPOINT_YES, "Yes")
	)
	(MQCA_Q_MGR_DESC, "QMgrDesc")
	(MQCA_Q_MGR_IDENTIFIER, "QMgrIdentifier")
	(MQCA_Q_MGR_NAME, "QMgrName")
	(MQCA_QSG_NAME, "QSGName")
	(MQIA_ACCOUNTING_Q, "QueueAccounting", DisplayMapInitializer
		(MQMON_NONE, "None")
		(MQMON_OFF, "Off")
		(MQMON_ON, "On")
		(MQMON_Q_MGR, "Qmgr")
	)
	(MQIA_MONITORING_Q, "QueueMonitoring", DisplayMapInitializer
		(MQMON_OFF, "Off")
		(MQMON_NONE, "None")
		(MQMON_LOW, "Low")
		(MQMON_MEDIUM, "Medium")
		(MQMON_HIGH, "High")
		(MQMON_Q_MGR, "Qmgr")
	)
	(MQIA_STATISTICS_Q, "QueueStatistics", DisplayMapInitializer
		(MQMON_NONE, "None")
		(MQMON_OFF, "Off")
		(MQMON_ON, "On")
		(MQMON_Q_MGR, "Qmgr")
	)
	(MQIA_RECEIVE_TIMEOUT, "ReceiveTimeout")
	(MQIA_RECEIVE_TIMEOUT_MIN, "ReceiveTimeoutMin")
	(MQIA_RECEIVE_TIMEOUT_TYPE, "ReceiveTimeoutType", DisplayMapInitializer
		(MQRCVTIME_MULTIPLY, "Multiply")
		(MQRCVTIME_ADD, "Add")
		(MQRCVTIME_EQUAL, "Equal")
	)
	(MQIA_REMOTE_EVENT, "RemoveEvent", DisplayMapInitializer
		(MQEVR_DISABLED, "Disabled")
		(MQEVR_ENABLED, "Enabled")
	)
	(MQCA_REPOSITORY_NAME, "RepositoryName")
	(MQCA_REPOSITORY_NAMELIST, "RepositoryNamelist")
	(MQIA_SECURITY_CASE, "SecurityCase", DisplayMapInitializer
		(MQSCYC_UPPER, "Upper")
		(MQSCYC_MIXED, "Mixed")
	)
	(MQIA_SHARED_Q_Q_MGR_NAME, "SharedQQmgrName", DisplayMapInitializer
		(MQSQQM_USE, "Use")
		(MQSQQM_IGNORE, "Ignore")
	)
	(MQCA_SSL_CRL_NAMELIST, "SSLCRLNamelist")
	(MQCA_SSL_CRYPTO_HARDWARE, "SSLCryptoHardware")
	(MQIA_SSL_EVENT, "SSLEvent", DisplayMapInitializer
		(MQEVR_DISABLED, "Disabled")
		(MQEVR_ENABLED, "Enabled")
	)
	(MQIA_SSL_FIPS_REQUIRED, "SSLFipsRequired", DisplayMapInitializer
		(MQSSL_FIPS_NO, "No")
		(MQSSL_FIPS_YES, "Yes")
	)
	(MQCA_SSL_KEY_REPOSITORY, "SSLKeyRepository")
	(MQIA_SSL_RESET_COUNT, "SSLKeyResetCount")
	(MQIA_SSL_TASKS, "SSLTasks")
	(MQIA_START_STOP_EVENT, "StartStopEvent", DisplayMapInitializer
		(MQEVR_DISABLED, "Disabled")
		(MQEVR_ENABLED, "Enabled")
	)
	(MQIA_STATISTICS_INTERVAL, "StatisticsInterval")
	(MQIA_SYNCPOINT, "SyncPoint", DisplayMapInitializer
		(MQSP_AVAILABLE, "Available")
		(MQSP_NOT_AVAILABLE, "Not Available")
	)
	(MQIA_TCP_CHANNELS, "TCPChannels")
	(MQIA_TCP_KEEP_ALIVE, "TCPKeepAlive", DisplayMapInitializer
		(MQTCPKEEP_NO, "No")
		(MQTCPKEEP_YES, "Yes")
	)
	(MQCA_TCP_NAME, "TCPName")
	(MQIA_TCP_STACK_TYPE, "TCPStackType", DisplayMapInitializer
		(MQTCPSTACK_SINGLE, "Single")
		(MQTCPSTACK_MULTIPLE, "Multiple")
	)
	(MQIA_TRACE_ROUTE_RECORDING, "TraceRouteRecording", DisplayMapInitializer
		(MQRECORDING_DISABLED, "Disabled")
		(MQRECORDING_MSG, "Msg")
		(MQRECORDING_Q, "Q")
	)
	(MQIA_TREE_LIFE_TIME, "TreeLifeTime")
	(MQIA_TRIGGER_INTERVAL, "TriggerInterval")
	(MQCA_VERSION, "Version")
	(MQIA_XR_CAPABILITY, "XrCapability", DisplayMapInitializer
		(MQCAP_SUPPORTED, "Supported")
		(MQCAP_NOT_SUPPORTED, "Not Supported")
	)
	// Extended Response
	(MQBACF_RESPONSE_ID, "ResponseID")
	(MQCACF_RESPONSE_Q_MGR_NAME, "ResponseQMgrName")
;

Dictionary queueManagerStatusDictionary = Dictionary()
	(MQIACF_CHINIT_STATUS, "ChannelInitiatorStatus", DisplayMapInitializer
		(MQSVC_STATUS_STOPPED, "Stopped")
		(MQSVC_STATUS_STARTING, "Starting")
		(MQSVC_STATUS_RUNNING, "Running")
		(MQSVC_STATUS_STOPPING, "Stopping")
		(MQSVC_STATUS_RETRYING, "Retrying")
	)
	(MQIACF_CMD_SERVER_STATUS, "CommandServerStatus", DisplayMapInitializer
		(MQSVC_STATUS_STOPPED, "Stopped")
		(MQSVC_STATUS_STARTING, "Starting")
		(MQSVC_STATUS_RUNNING, "Running")
		(MQSVC_STATUS_STOPPING, "Stopping")
		(MQSVC_STATUS_RETRYING, "Retrying")
	)
	(MQIACF_CONNECTION_COUNT, "ConnectionCount")
	(MQCACF_CURRENT_LOG_EXTENT_NAME, "CurrentLog")
	(MQCA_INSTALLATION_DESC, "InstallationDesc")
	(MQCA_INSTALLATION_NAME, "InstallationName")
	(MQCA_INSTALLATION_PATH, "InstallationPath")
	(MQCACF_LOG_PATH, "LogPath")
	(MQCACF_MEDIA_LOG_EXTENT_NAME, "MediaRecoveryLog")
	(MQCA_Q_MGR_NAME)
	(MQIACF_Q_MGR_STATUS, "QMgrStatus", DisplayMapInitializer
		(MQQMSTA_STARTING, "Starting")
		(MQQMSTA_RUNNING, "Running")
		(MQQMSTA_QUIESCING, "Quiescing")
	)
	(MQCACF_RESTART_LOG_EXTENT_NAME, "RestartRecoveryLog")
	(MQCACF_Q_MGR_START_DATE, "StartDate")
	(MQCACF_Q_MGR_START_TIME, "StartTime")
	(MQIACF_PERMIT_STANDBY, "PermitStandby", DisplayMapInitializer
		(MQSTDBY_NOT_PERMITTED, "Not Permitted")
		(MQSTDBY_PERMITTED, "Permitted")
	)
	// Extended Response
	(MQBACF_RESPONSE_ID)
	(MQCACF_RESPONSE_Q_MGR_NAME)
;

Dictionary queueDictionary = Dictionary()
	(MQCA_ALTERATION_DATE)
	(MQCA_ALTERATION_TIME)
	(MQCA_BACKOUT_REQ_Q_NAME, "BackoutRequeueName")
	(MQIA_BACKOUT_THRESHOLD, "BackoutThreshold")
	//(MQCA_BASE_Q_NAME, "BaseQName")
	(MQCA_BASE_OBJECT_NAME, "BaseObjectName")
	(MQIA_BASE_TYPE, "BaseType", DisplayMapInitializer
		(MQOT_Q, "Queue")
		(MQOT_TOPIC, "Topic")
	)
	(MQCA_CF_STRUC_NAME, "CFStructure")
#ifdef MQCA_CLUS_CHL_NAME
	(MQCA_CLUS_CHL_NAME, "ClusterChannelName")
#endif
	(MQCA_CLUSTER_DATE, "ClusterDate")
	(MQCA_CLUSTER_NAME, "ClusterName")
	(MQCA_CLUSTER_NAMELIST, "ClusterNamelist")
	(MQIA_CLUSTER_Q_TYPE, "ClusterQType", DisplayMapInitializer
		(MQCQT_LOCAL_Q, "Local")
		(MQCQT_ALIAS_Q, "Alias")
		(MQCQT_REMOTE_Q, "Remote")
		(MQCQT_Q_MGR_ALIAS, "Qmgr Alias")
	)
	(MQCA_CLUSTER_TIME, "ClusterTime")
	(MQIA_CLWL_Q_PRIORITY, "CLWLQueuePriority")
	(MQIA_CLWL_Q_RANK, "CLWLQueueRank")
	(MQIA_CLWL_USEQ)
	(MQCA_CREATION_DATE)
	(MQCA_CREATION_TIME)
	(MQIA_CURRENT_Q_DEPTH, "CurrentQDepth")
	(MQCA_CUSTOM)
	(MQIA_DEF_PUT_RESPONSE_TYPE, "DefaultPutResponse", DisplayMapInitializer
		(MQPRT_SYNC_RESPONSE, "Sync")
		(MQPRT_ASYNC_RESPONSE, "Async")
	)
	(MQIA_DEF_BIND, "DefBind", DisplayMapInitializer
		(MQBND_BIND_ON_OPEN, "On Open")
		(MQBND_BIND_NOT_FIXED, "Not Fixed")
#ifdef MQBND_BIND_ON_GROUP
		(MQBND_BIND_ON_GROUP, "On Group")
#endif
	)
	(MQIA_DEFINITION_TYPE, "DefinitionType", DisplayMapInitializer
		(MQQDT_PREDEFINED, "Predefined")
		(MQQDT_PERMANENT_DYNAMIC, "Permanent Dynamically")
		(MQQDT_SHARED_DYNAMIC, "Shared Dynamic")
		(MQQDT_TEMPORARY_DYNAMIC, "Temporary Dynamic")
	)
	(MQIA_DEF_INPUT_OPEN_OPTION, "DefInputOpenOption", DisplayMapInitializer
		(MQOO_INPUT_EXCLUSIVE, "Exclusive")
		(MQOO_INPUT_SHARED, "Shared")
	)
	(MQIA_DEF_PERSISTENCE, "DefPersistence", DisplayMapInitializer
		(MQPER_PERSISTENT, "Persistent")
		(MQPER_NOT_PERSISTENT, "Not Persistent")
	)
	(MQIA_DEF_PRIORITY, "DefPriority")
	(MQIA_DEF_READ_AHEAD, "DefReadAhead", DisplayMapInitializer
		(MQREADA_NO, "No")
		(MQREADA_YES, "Yes")
		(MQREADA_DISABLED, "Disabled")
	)
	(MQIA_DIST_LISTS)
	(MQIA_HARDEN_GET_BACKOUT, "HardenGetBackout", DisplayMapInitializer
		(MQQA_BACKOUT_HARDENED, "Hardened")
		(MQQA_BACKOUT_NOT_HARDENED, "Not Hardened")
	)
	(MQIA_INDEX_TYPE, "IndexType", DisplayMapInitializer
		(MQIT_NONE, "None")
		(MQIT_MSG_ID, "Message ID")
		(MQIT_CORREL_ID, "Correlation ID")
		(MQIT_MSG_TOKEN, "Message Token")
		(MQIT_GROUP_ID, "Group ID")
	)
	(MQIA_INHIBIT_GET, "InhibitGet", DisplayMapInitializer
		(MQQA_GET_ALLOWED, "Allowed")
		(MQQA_GET_INHIBITED, "Inhibited")
	)
	(MQIA_INHIBIT_PUT, "InhibitPut", DisplayMapInitializer
		(MQQA_PUT_ALLOWED, "Allowed")
		(MQQA_PUT_INHIBITED, "Inhibited")
	)
	(MQCA_INITIATION_Q_NAME, "InitiationQName")
	(MQIA_MAX_MSG_LENGTH)
	(MQIA_MAX_Q_DEPTH, "MaxQDepth")
	(MQIA_MSG_DELIVERY_SEQUENCE, "MsgDeliverySequence", DisplayMapInitializer
		(MQMDS_PRIORITY, "priority")
		(MQMDS_FIFO, "FIFO")
	)
	(MQIA_NPM_CLASS, "NonPersistentMessageClass", DisplayMapInitializer
		(MQNPM_CLASS_NORMAL, "Normal")
		(MQNPM_CLASS_HIGH, "High")
	)
	(MQIA_OPEN_INPUT_COUNT, "OpenInputCount")
	(MQIA_OPEN_OUTPUT_COUNT, "OpenOutputCount")
	(MQIA_PAGESET_ID, "PageSetID")
	(MQCA_PROCESS_NAME, "ProcessName")
	(MQIA_PROPERTY_CONTROL, "PropertyControl", DisplayMapInitializer
		(MQPROP_COMPATIBILITY, "Compatibility")
		(MQPROP_NONE, "None")
		(MQPROP_ALL, "All")
		(MQPROP_FORCE_MQRFH2, "Force MQRFH2")
	)
	(MQIA_Q_DEPTH_HIGH_EVENT, "QDepthHighEvent", DisplayMapInitializer
		(MQEVR_DISABLED, "Disabled")
		(MQEVR_ENABLED, "Enabled")
	)
	(MQIA_Q_DEPTH_HIGH_LIMIT, "QDepthHighLimit")
	(MQIA_Q_DEPTH_LOW_EVENT, "QDepthLowEvent", DisplayMapInitializer
		(MQEVR_DISABLED, "Disabled")
		(MQEVR_ENABLED, "Enabled")
	)
	(MQIA_Q_DEPTH_LOW_LIMIT, "QDepthLowLimit")
	(MQIA_Q_DEPTH_MAX_EVENT, "QDepthMaxEvent", DisplayMapInitializer
		(MQEVR_DISABLED, "Disabled")
		(MQEVR_ENABLED, "Enabled")
	)
	(MQCA_Q_DESC, "QDesc")
	(MQCA_Q_MGR_IDENTIFIER)
	(MQCA_Q_MGR_NAME)
	(MQCA_Q_NAME, "QName")
	(MQIA_QSG_DISP, "QSGDisposition", DisplayMapInitializer
		(MQQSGD_COPY, "Copy")
		(MQQSGD_GROUP, "Group")
		(MQQSGD_Q_MGR, "Qmgr")
		(MQQSGD_SHARED, "Shared")
	)
	(MQIA_Q_SERVICE_INTERVAL, "QServiceInterval")
	(MQIA_Q_SERVICE_INTERVAL_EVENT, "QServiceIntervalEvent", DisplayMapInitializer
		(MQQSIE_HIGH, "High")
		(MQQSIE_OK, "Ok")
		(MQQSIE_NONE, "None")
	)
	(MQIA_ACCOUNTING_Q)
	(MQIA_MONITORING_Q)
	(MQIA_STATISTICS_Q)
	(MQIA_Q_TYPE, "QType", DisplayMapInitializer
		(MQQT_ALL, "All")
		(MQQT_LOCAL, "Local")
		(MQQT_ALIAS, "Alias")
		(MQQT_CLUSTER, "Cluster")
		(MQQT_MODEL, "Model")
		(MQQT_REMOTE, "Remote")
	)
	(MQCA_REMOTE_Q_MGR_NAME, "RemoteQmgrName")
	(MQCA_REMOTE_Q_NAME, "RemoteQName")
	(MQIA_RETENTION_INTERVAL, "RetentionInterval")
	(MQIA_SCOPE, "Scope", DisplayMapInitializer
		(MQSCO_Q_MGR, "Qmgr")
		(MQSCO_CELL, "Cell")
	)
	(MQIA_SHAREABILITY, "Shareability", DisplayMapInitializer
		(MQQA_SHAREABLE, "Shareable")
		(MQQA_NOT_SHAREABLE, "Not Shareable")
	)
	(MQCA_STORAGE_CLASS, "StorageClass")
	(MQCA_TPIPE_NAME, "TpipeNames")
	(MQIA_TRIGGER_CONTROL, "TriggerControl", DisplayMapInitializer
		(MQTC_OFF, "Off")
		(MQTC_ON, "On")
	)
	(MQCA_TRIGGER_DATA, "TriggerData")
	(MQIA_TRIGGER_DEPTH, "TriggerDepth")
	(MQIA_TRIGGER_MSG_PRIORITY, "TriggerMsgPriority")
	(MQIA_TRIGGER_TYPE, "TriggerType", DisplayMapInitializer
		(MQTT_NONE, "None")
		(MQTT_FIRST, "First")
		(MQTT_EVERY, "Every")
		(MQTT_DEPTH, "Depth")
	)
	(MQIA_USAGE, "Usage", DisplayMapInitializer
		(MQUS_NORMAL, "Normal")
		(MQUS_TRANSMISSION, "Transmission")
	)
	(MQCA_XMIT_Q_NAME, "XmitQName")
	// Extended Response
	(MQBACF_RESPONSE_ID)
	(MQCACF_RESPONSE_Q_MGR_NAME)
;

Dictionary queueStatusDictionary = Dictionary()
	(MQIA_CURRENT_Q_DEPTH)
	(MQCACF_LAST_GET_DATE, "LastGetDate")
	(MQCACF_LAST_GET_TIME, "LastGetTime")
	(MQCACF_LAST_PUT_DATE, "LastPutDate")
	(MQCACF_LAST_PUT_TIME, "LastPutTime")
	(MQCACF_MEDIA_LOG_EXTENT_NAME, "MediaRecoveryLogExtent")
	(MQIACF_OLDEST_MSG_AGE, "OldestMsgAge")
	(MQIACF_Q_TIME_INDICATOR, "OnQTime")
	(MQIA_OPEN_INPUT_COUNT)
	(MQIA_OPEN_OUTPUT_COUNT)
	(MQIA_QSG_DISP)
	(MQIA_MONITORING_Q)
	(MQIACF_UNCOMMITTED_MSGS, "UncommitedMsgs", DisplayMapInitializer
		(MQQSUM_YES, "Yes")
		(MQQSUM_NO, "No")
	)
	(MQCACF_APPL_DESC, "ApplDesc")
	(MQCACF_APPL_TAG, "ApplTag")
	(MQIA_APPL_TYPE, "ApplType", DisplayMapInitializer
		(MQAT_UNKNOWN, "Unknown")
		(MQAT_NO_CONTEXT, "No Context")
		(MQAT_CICS, "CICS Transaction")
		(MQAT_MVS, "Z/OS")
		(MQAT_IMS, "IMS Transaction")
		(MQAT_OS2, "OS/2")
		(MQAT_DOS, "DOS")
		(MQAT_UNIX, "Unix")
		(MQAT_QMGR, "QueueManager Process")
		(MQAT_OS400, "OS/400")
		(MQAT_WINDOWS, "Windows")
		(MQAT_CICS_VSE, "CICS VSE")
		(MQAT_WINDOWS_NT, "Windows NT")
		(MQAT_VMS, "VMS")
		(MQAT_GUARDIAN, "Guardian")
		(MQAT_NSK, "NSK")
		(MQAT_VOS, "VOS")
		(MQAT_OPEN_TP1, "Open TP1")
		(MQAT_VM, "VM")
		(MQAT_IMS_BRIDGE, "IMS Bridge")
		(MQAT_XCF, "XCF")
		(MQAT_CICS_BRIDGE, "CICS Bridge")
		(MQAT_NOTES_AGENT, "Notes Agent")
		(MQAT_TPF, "TPF")
		(MQAT_USER, "User Application")
		(MQAT_BROKER, "Broker")
		(MQAT_JAVA, "Java")
		(MQAT_DQM, "DQM")
		(MQAT_CHANNEL_INITIATOR, "Channel Initiator")
		(MQAT_WLM, "WLM")
		(MQAT_BATCH, "Batch Application")
		(MQAT_RRS_BATCH, "RRS-coordinated Batch Application")
		(MQAT_SIB, "SIB")
		(MQAT_SYSTEM_EXTENSION, "System Extension")
	)
	(MQCACF_ASID, "ASId")
	(MQIACF_ASYNC_STATE, "AsynchronousState", DisplayMapInitializer
		(MQAS_ACTIVE, "Active")
		(MQAS_INACTIVE, "Inactive")
		(MQAS_SUSPENDED, "Suspended")
		(MQAS_SUSPENDED_TEMPORARY, "Suspended Temporary")
		(MQAS_NONE, "None")
		(MQAS_STARTED, "Started")
		(MQAS_START_WAIT, "Start Wait")
		(MQAS_STOPPED, "Stopped")
	)
	(MQCACH_CHANNEL_NAME, "ChannelName")
	(MQCACH_CONNECTION_NAME)
	(MQBACF_EXTERNAL_UOW_ID, "ExternalUOWId")
	(MQIACF_HANDLE_STATE, "HandleState", DisplayMapInitializer
		(MQHSTATE_ACTIVE, "Active")
		(MQHSTATE_INACTIVE, "Inactive")
	)
	(MQIACF_OPEN_BROWSE, "OpenBrowse", DisplayMapInitializer
		(MQQSO_YES, "Yes")
		(MQQSO_NO, "No")
	)
	(MQIACF_OPEN_INPUT_TYPE, "OpenInputType", DisplayMapInitializer
		(MQQSO_NO, "No")
		(MQQSO_SHARED, "Shared")
		(MQQSO_EXCLUSIVE, "Exclusive")
	)
	(MQIACF_OPEN_INQUIRE, "OpenInquire", DisplayMapInitializer
		(MQQSO_YES, "Yes")
		(MQQSO_NO, "No")
	)
	(MQIACF_OPEN_OPTIONS, "OpenOptions")
	(MQIACF_OPEN_OUTPUT, "OpenOutput", DisplayMapInitializer
		(MQQSO_YES, "Yes")
		(MQQSO_NO, "No")
	)
	(MQIACF_OPEN_SET, "OpenSet", DisplayMapInitializer
		(MQQSO_YES, "Yes")
		(MQQSO_NO, "No")
	)
	(MQIACF_PROCESS_ID, "ProcessId")
	(MQCACF_PSB_NAME, "PSBName")
	(MQCACF_PST_ID, "PSTId")
	(MQBACF_Q_MGR_UOW_ID, "QMgrUOWId")
	(MQCA_Q_NAME)
	(MQIA_QSG_DISP)
	(MQIACF_Q_STATUS_TYPE, "StatusType", DisplayMapInitializer
		(MQIACF_Q_STATUS, "Queue Status")
		(MQIACF_Q_HANDLE, "Handle")
	)
	(MQCACF_TASK_NUMBER, "TaskNumber")
	(MQIACF_THREAD_ID, "ThreadId")
	(MQCACF_TRANSACTION_ID, "TransactionId")
	(MQBACF_EXTERNAL_UOW_ID, "UOWIdentifier")
	(MQIACF_UOW_TYPE, "UOWType", DisplayMapInitializer
		(MQUOWT_Q_MGR, "QueueManager")
		(MQUOWT_CICS, "CICS")
		(MQUOWT_RRS, "RRS")
		(MQUOWT_IMS, "IMS")
		(MQUOWT_XA, "XA")
	)
	(MQCACF_USER_IDENTIFIER, "UserIdentifier")
	// Extended Response
	(MQBACF_RESPONSE_ID)
	(MQCACF_RESPONSE_Q_MGR_NAME)
;

Dictionary channelDictionary = Dictionary()
	(MQCA_ALTERATION_DATE)
	(MQCA_ALTERATION_TIME)
	(MQIACH_BATCH_HB, "BatchHeartBeat")
	(MQIACH_BATCH_INTERVAL, "BatchInterval")
#ifdef MQIACH_BATCH_DATA_LIMIT
	(MQIACH_BATCH_DATA_LIMIT, "BatchDataLimit")
#endif
	(MQIACH_BATCH_SIZE, "BatchSize")
	(MQCACH_DESC, "ChannelDesc")
	(MQIA_MONITORING_CHANNEL)
	(MQCACH_CHANNEL_NAME)
	(MQCACH_CHANNEL_START_DATE, "ChannelStartDate")
	(MQCACH_CHANNEL_START_TIME, "ChannelStartTime")
	(MQIA_STATISTICS_CHANNEL)
	(MQIACH_CHANNEL_TYPE, "ChannelType", DisplayMapInitializer
		(MQCHT_ALL, "All")
		(MQCHT_SENDER, "Sender")
		(MQCHT_SERVER, "Server")
		(MQCHT_RECEIVER, "Receiver")
		(MQCHT_REQUESTER, "Requester")
		(MQCHT_SVRCONN, "Server-connection")
		(MQCHT_CLNTCONN, "Client-connection")
		(MQCHT_CLUSRCVR, "Cluster-receiver")
		(MQCHT_CLUSSDR, "Cluster-sender")
#ifdef MQCHT_MQTT
		(MQCHT_MQTT, "Telemetry")
#endif
	)
	(MQIACH_CLIENT_CHANNEL_WEIGHT, "ClientChannelWeight")
#ifdef MQCACH_CLIENT_ID
	(MQCACH_CLIENT_ID, "ClientIdentifier")
#endif
	(MQCA_CLUSTER_NAME)
	(MQCA_CLUSTER_NAMELIST)
	(MQIACH_CLWL_CHANNEL_PRIORITY, "CLWLChannelPriority")
	(MQIACH_CLWL_CHANNEL_RANK, "CLWLChannelRank")
	(MQIACH_CLWL_CHANNEL_WEIGHT, "CLWLChannelWeight")
	(MQIACH_CONNECTION_AFFINITY, "ConnectionAffinity", DisplayMapInitializer
		(MQCAFTY_PREFERRED, "Preferred")
		(MQCAFTY_NONE, "None")
	)
	(MQCACH_CONNECTION_NAME, "ConnectionName")
	(MQIACH_DATA_CONVERSION, "DataConversion", DisplayMapInitializer
		(MQCDC_NO_SENDER_CONVERSION, "No")
		(MQCDC_SENDER_CONVERSION, "Sender")
	)
	(MQIACH_CHANNEL_DISP, "ChannelDisposition", DisplayMapInitializer
		(MQCHLD_ALL, "All")
		(MQCHLD_PRIVATE, "Private")
		(MQCHLD_FIXSHARED, "Fix Shared")
		(MQCHLD_SHARED, "Shared")
	)
	(MQIACH_DISC_INTERVAL, "DiscInterval")
#ifdef MQIACH_DEF_RECONNECT
	(MQIACH_DEF_RECONNECT, "DefReconnect", DisplayMapInitializer
		(MQRCN_NO, "No")
		(MQRCN_YES, "Yes")
		(MQRCN_Q_MGR, "Qmgr")
		(MQRCN_DISABLED, "Disabled")
	)
#endif
	(MQIACH_HDR_COMPRESSION, "HeaderCompression", DisplayMapInitializer
		(MQCOMPRESS_NONE, "None")
		(MQCOMPRESS_SYSTEM, "System")
		(MQCOMPRESS_NOT_AVAILABLE, "Not Available")
		(MQCOMPRESS_RLE, "RLE")
		(MQCOMPRESS_ZLIBFAST, "Zlib Fast")
		(MQCOMPRESS_ZLIBHIGH, "Zlib High")
		(MQCOMPRESS_ANY, "Any")
		(MQCOMPRESS_SYSTEM, "System")
		(MQCOMPRESS_NOT_AVAILABLE, "Not Available")
	)
	(MQIACH_HB_INTERVAL, "HeartbeatInterval")
#ifdef MQIACH_IN_DOUBT
	(MQIACH_IN_DOUBT, "InDoubt")
#endif
#ifdef MQIACH_IN_DOUBT_IN
	(MQIACH_IN_DOUBT_IN, "InDoubtInbound")
#endif
#ifdef MQIACH_IN_DOUBT_OUT
	(MQIACH_IN_DOUBT_OUT, "InDoubtOutbound")
#endif
	(MQIACH_KEEP_ALIVE_INTERVAL, "KeepAliveInterval")
	(MQCACH_LAST_MSG_DATE, "LastMsgDate")
	(MQCACH_LAST_MSG_TIME, "LastMsgTime")
	(MQCACH_LOCAL_ADDRESS, "LocalAddress")
	(MQIACH_LONG_RETRY, "LongRetryCount")
	(MQIACH_LONG_TIMER, "LongRetryInterval")
	(MQIACH_MAX_INSTANCES, "MaxInstances")
	(MQIACH_MAX_INSTS_PER_CLIENT, "MaxInstancesPerClient")
	(MQIACH_MAX_MSG_LENGTH, "MaxMsgLength")
	(MQCACH_MCA_NAME, "MCAName")
	(MQIACH_MCA_TYPE, "MCAType", DisplayMapInitializer
		(MQMCAT_PROCESS, "Process")
		(MQMCAT_THREAD, "Thread")
	)
	(MQCACH_MCA_USER_ID, "MCAUserIdentifier")
	(MQIACH_MSG_COMPRESSION, "MessageCompression", DisplayMapInitializer
		(MQCOMPRESS_NONE, "None")
		(MQCOMPRESS_RLE, "RLE")
		(MQCOMPRESS_ZLIBFAST, "Zlib Fast")
		(MQCOMPRESS_ZLIBHIGH, "Zlib High")
		(MQCOMPRESS_ANY, "Any")
	)
	(MQCACH_MODE_NAME, "ModeName")
	(MQCACH_MSG_EXIT_NAME, "MsgExit")
#ifdef MQIACH_MSGS_RECEIVED
	(MQIACH_MSGS_RECEIVED, "MsgsReceived")
#endif
	(MQIACH_MR_COUNT, "MsgRetryCount")
	(MQCACH_MR_EXIT_NAME, "MsgRetryExit")
	(MQIACH_MR_INTERVAL, "MsgRetryInterval")
	(MQCACH_MR_EXIT_USER_DATA, "MsgRetryUserData")
#ifdef MQIACH_MSGS_SENT
	(MQIACH_MSGS_SENT, "MsgsSent")
#endif
	(MQCACH_MSG_EXIT_USER_DATA, "MsgUserData")
	(MQIACH_NETWORK_PRIORITY, "NetworkPriority")
	(MQIACH_NPM_SPEED, "NonPersistentMsgSpeed", DisplayMapInitializer
		(MQNPMS_FAST, "Fast")
		(MQNPMS_NORMAL, "Normal")
	)
	(MQCACH_PASSWORD, "Password")
	(MQIA_PROPERTY_CONTROL, "PropertyControl", DisplayMapInitializer
		(MQPROP_COMPATIBILITY, "Compatibility")
		(MQPROP_NONE, "None")
		(MQPROP_ALL, "All")
	)
	(MQIACH_PUT_AUTHORITY, "PutAuthority", DisplayMapInitializer
		(MQPA_DEFAULT, "Default")
		(MQPA_CONTEXT, "Context")
	)
	(MQCA_Q_MGR_NAME)
	(MQIA_QSG_DISP)
	(MQCACH_RCV_EXIT_NAME, "ReceiveExit")
	(MQCACH_RCV_EXIT_USER_DATA, "ReceiveUserData")
	(MQIACH_RESET_REQUESTED, "ResetSeq")
	(MQCACH_SEC_EXIT_NAME, "SecurityExit")
	(MQCACH_SEC_EXIT_USER_DATA, "SecurityUserData")
	(MQCACH_SEND_EXIT_NAME, "SendExit")
	(MQCACH_SEND_EXIT_USER_DATA, "SendUserData")
	(MQIACH_SEQUENCE_NUMBER_WRAP, "SeqNumberWrap")
	(MQIACH_SHARING_CONVERSATIONS, "SharingConversations")
	(MQIACH_SHORT_RETRY, "ShortRetryCount")
	(MQIACH_SHORT_TIMER, "ShortRetryInterval")
	(MQCACH_SSL_CIPHER_SPEC, "SSLCipherSpec")
	(MQIACH_SSL_CLIENT_AUTH, "SSLClientAuth", DisplayMapInitializer
		(MQSCA_REQUIRED, "Required")
		(MQSCA_OPTIONAL, "Optional")
	)
	(MQCACH_SSL_PEER_NAME, "SSLPeerName")
	(MQCACH_TP_NAME, "TpName")
	(MQIACH_XMIT_PROTOCOL_TYPE, "TransportType", DisplayMapInitializer
		(MQXPT_ALL, "All")
		(MQXPT_LOCAL, "Local")
		(MQXPT_LU62, "LU62")
		(MQXPT_TCP, "TCP")
		(MQXPT_NETBIOS, "NetBIOS")
		(MQXPT_SPX, "SPX")
		(MQXPT_DECNET, "DECnet")
		(MQXPT_UDP, "UDP")
	)
#ifdef MQIA_USE_DEAD_LETTER_Q
	(MQIA_USE_DEAD_LETTER_Q, "UseDLQ", DisplayMapInitializer
		(MQUSEDLQ_NO, "No")
		(MQUSEDLQ_YES, "Yes")
		(MQUSEDLQ_AS_PARENT, "As Parent")
	)
#endif
	(MQCACH_USER_ID, "UserIdentifier")
	(MQCACH_XMIT_Q_NAME, "XmitQName")
	// Extended Response
	(MQBACF_RESPONSE_ID)
	(MQCACF_RESPONSE_Q_MGR_NAME)
;

Dictionary channelStatusDictionary = Dictionary()
	(MQIACH_BATCHES, "Batches")
	(MQIACH_BATCH_SIZE)
	(MQIACH_BATCH_SIZE_INDICATOR, "BatchSizeIndicator")
	(MQIACH_BUFFERS_RCVD, "BuffersReceived")
	(MQIACH_BUFFERS_SENT, "BuffersSent")
	(MQIACH_BYTES_RECEIVED, "BytesReceived")
	(MQIACH_BYTES_SENT, "BytesSent")
	(MQIACH_CHANNEL_DISP, "ChannelDisposition", DisplayMapInitializer
		(MQCHLD_ALL, "All")
		(MQCHLD_PRIVATE, "Private")
		(MQCHLD_FIXSHARED, "Fix Shared")
		(MQCHLD_SHARED, "Shared")
	)
	(MQIACH_CHANNEL_INSTANCE_TYPE, "ChannelInstanceType", DisplayMapInitializer
		(MQOT_CURRENT_CHANNEL, "Current")
		(MQOT_SAVED_CHANNEL, "Saved")
		(MQOT_SHORT_CHANNEL, "Short")
	)
	(MQIA_MONITORING_CHANNEL)
	(MQCACH_CHANNEL_NAME)
	(MQCACH_CHANNEL_START_DATE)
	(MQCACH_CHANNEL_START_TIME)
	(MQIACH_CHANNEL_STATUS, "ChannelStatus", DisplayMapInitializer
		(MQCHS_BINDING, "Binding")
		(MQCHS_STARTING, "Starting")
		(MQCHS_RUNNING, "Running")
		(MQCHS_PAUSED, "Paused")
		(MQCHS_STOPPING, "Stopping")
		(MQCHS_STOPPED, "Stopped")
		(MQCHS_RETRYING, "Retrying")
		(MQCHS_REQUESTING, "Requesting")
		(MQCHS_INITIALIZING, "Initializing")
		(MQCHS_INACTIVE, "Inactive")
	)
	(MQIACH_CHANNEL_TYPE)
	(MQIACH_COMPRESSION_RATE, "CompressionRate")
	(MQIACH_COMPRESSION_TIME, "CompressionTime")
	(MQCACH_CONNECTION_NAME)
	(MQCACH_CURRENT_LUWID, "CurrentLUWID")
	(MQIACH_CURRENT_MSGS, "CurrentMsgs")
	(MQIACH_CURRENT_SEQ_NUMBER, "CurrentSequenceNumber")
	(MQIACH_CURRENT_SHARING_CONVS, "CurrentSharingConverstations")
	(MQIACH_EXIT_TIME_INDICATOR, "ExitTime")
	(MQIACH_HDR_COMPRESSION, "HeaderCompression", DisplayMapInitializer
		(MQCOMPRESS_NONE, "None")
		(MQCOMPRESS_SYSTEM, "System")
		(MQCOMPRESS_NOT_AVAILABLE, "Not Available")
		(MQCOMPRESS_RLE, "RLE")
		(MQCOMPRESS_ZLIBFAST, "Zlib Fast")
		(MQCOMPRESS_ZLIBHIGH, "Zlib High")
		(MQCOMPRESS_ANY, "Any")
		(MQCOMPRESS_SYSTEM, "System")
	)
	(MQIACH_HB_INTERVAL, "HeartbeatInterval")
	(MQIACH_INDOUBT_STATUS, "InDoubtStatus", DisplayMapInitializer
		(MQCHIDS_NOT_INDOUBT, "Not Indoubt")
		(MQCHIDS_INDOUBT, "Indoubt")
	)
	(MQIACH_KEEP_ALIVE_INTERVAL, "KeepAliveInterval")
	(MQCACH_LAST_LUWID, "LastLUWID")
	(MQCACH_LAST_MSG_DATE, "LastMsgDate")
	(MQCACH_LAST_MSG_TIME, "LastMsgTime")
	(MQIACH_LAST_SEQ_NUMBER, "LastSequenceNumber")
	(MQCACH_LOCAL_ADDRESS, "LocalAddress")
	(MQIACH_LONG_RETRIES_LEFT, "LongRetriesLeft")
	(MQIACH_MAX_MSG_LENGTH, "MaxMsgLength")
	(MQIACH_MAX_SHARING_CONVS, "MaxSharingConversations")
	(MQCACH_MCA_JOB_NAME, "MCAJobName")
	(MQIACH_MCA_STATUS, "MCAStatus", DisplayMapInitializer
		(MQMCAS_STOPPED, "Stopped")
		(MQMCAS_RUNNING, "Running")
	)
	(MQCACH_MCA_USER_ID, "MCAUserIdentifier")
	(MQIACH_MSG_COMPRESSION, "")
#ifdef MQIACH_MSGS
	(MQIACH_MSGS, "Msgs")
#endif
	(MQIACH_XMITQ_MSGS_AVAILABLE, "MsgsAvailable")
	(MQIACH_NETWORK_TIME_INDICATOR, "NetTime")
	(MQIACH_NPM_SPEED, "NonPersistentMsgSpeed", DisplayMapInitializer
		(MQNPMS_FAST, "Fast")
		(MQNPMS_NORMAL, "Normal")
	)
	(MQCA_Q_MGR_NAME)
	(MQCACH_REMOTE_APPL_TAG, "RemoteApplTag")
#ifdef MQCACH_REMOTE_PRODUCT
	(MQCACH_REMOTE_PRODUCT, "RemoteProduct", DisplayMapInitializer
#ifdef MQMM
		(MQMM, "Queue Manager (non z/OS Platform")
#endif
#ifdef MQMV
		(MQMV, "Queue Manager on z/OS")
#endif
#ifdef MQCC
		(MQCC, "WebSphere MQ C client")
#endif
#ifdef MQNM
		(MQNM, "WebSphere MQ .NET fully managed client")
#endif
#ifdef MQJB
		(MQJB, "WebSphere MQ Classes for JAVA")
#endif
#ifdef MQJN
		(MQJN, "WebSphere MQ Classes for JMS (normal mode)")
#endif
#ifdef MQJM
		(MQJM, "WebSphere MQ Classes for JMS (migration mode)")
#endif
#ifdef MQJU
		(MQJU, "Common Java interface to the MQI")
#endif
#ifdef MQXC
		(MQXC, "XMS client C/C++ (normal mode)")
#endif
#ifdef MQXD
		(MQXD, "XMS client C/C++ (migration mode)")
#endif
#ifdef MQXN
		(MQXN, "XMS client .NET (normal mode)")
#endif
#ifdef MQXM
		(MQXM, "XMS client .NET (migration mode)")
#endif
		(0, "")
	)
#endif
#ifdef MQCACH_REMOTE_VERSION
	(MQCACH_REMOTE_VERSION, "RemoteVersion")
#endif
	(MQCA_REMOTE_Q_MGR_NAME)
	(MQIACH_SHORT_RETRIES_LEFT, "ShortRetriesLeft")
	(MQCACH_SSL_CERT_ISSUER_NAME, "SSLCertRemoteIssuerName")
	(MQCACH_SSL_CERT_USER_ID, "SSLCertUserId")
	(MQCACH_SSL_KEY_RESET_DATE, "SSLKeyResetDate")
	(MQIACH_SSL_KEY_RESETS, "SSLKeyResets")
	(MQCACH_SSL_KEY_RESET_TIME, "SSLKeyResetTime")
	(MQCACH_SSL_SHORT_PEER_NAME, "SSLShortPeerName")
	(MQIACH_STOP_REQUESTED, "StopRequested", DisplayMapInitializer
		(MQCHSR_STOP_NOT_REQUESTED, "Stop Not Requested")
		(MQCHSR_STOP_REQUESTED, "Stop Requested")
	)
	(MQIACH_CHANNEL_SUBSTATE, "SubState", DisplayMapInitializer
#ifdef MQCHSSTATE_CHADEXIT
		(MQCHSSTATE_CHADEXIT, "Running Channel Auto-definition Exit")
#endif
		(MQCHSSTATE_COMPRESSING, "Compressing")
		(MQCHSSTATE_END_OF_BATCH, "End Of Batch")
#ifdef MQCHSSTATE_HANDSHAKING
		(MQCHSSTATE_HANDSHAKING, "SSL Handshaking")
#endif
		(MQCHSSTATE_HEARTBEATING, "Heartbeating")
		(MQCHSSTATE_IN_MQGET, "MQQET")
		(MQCHSSTATE_IN_MQI_CALL, "MQ API Call")
		(MQCHSSTATE_IN_MQPUT, "MQPUT")
#ifdef MQCHSSTATE_MREXIT
		(MQCHSSTATE_MREXIT, "Retry Exit")
#endif
		(MQCHSSTATE_IN_MSGEXIT, "Message Exit")
		(MQCHSSTATE_NAME_SERVER, "Name Server")
		(MQCHSSTATE_NET_CONNECTING, "Network Connect")
		(MQCHSSTATE_OTHER, "Other")
		(MQCHSSTATE_IN_RCVEXIT, "Receive Exit")
		(MQCHSSTATE_RECEIVING, "Receiving")
		(MQCHSSTATE_RESYNCHING, "Resynching")
		(MQCHSSTATE_IN_SCYEXIT, "Security Exit")
		(MQCHSSTATE_IN_SENDEXIT, "Send Exit")
		(MQCHSSTATE_SENDING, "Sending")
		(MQCHSSTATE_SERIALIZING, "Serializing")
	)
	(MQCACH_XMIT_Q_NAME)
	(MQIACH_XMITQ_TIME_INDICATOR, "XQTime")
	// Extended Response
	(MQBACF_RESPONSE_ID)
	(MQCACF_RESPONSE_Q_MGR_NAME)
;

Dictionary clusterQueueManagerDictionary = Dictionary()
	(MQCA_ALTERATION_DATE)
	(MQCA_ALTERATION_TIME)
	(MQIACH_BATCH_HB)
	(MQIACH_BATCH_INTERVAL)
	(MQIACH_BATCH_SIZE)
#ifdef MQIACH_BATCH_DATA_LIMIT
	(MQIACH_BATCH_DATA_LIMIT)
#endif
	(MQCACH_DESC)
	(MQIA_MONITORING_CHANNEL)
	(MQCACH_CHANNEL_NAME)
	(MQIACH_CHANNEL_STATUS)
	(MQCA_CLUSTER_DATE)
	(MQCA_CLUSTER_NAME)
	(MQCA_CLUSTER_TIME)
	(MQIACH_CLWL_CHANNEL_PRIORITY, "CLWLChannelPriority")
	(MQIACH_CLWL_CHANNEL_RANK, "CLWLChannelRank")
	(MQIACH_CLWL_CHANNEL_WEIGHT, "CLWLChannelWeight")
	(MQCACH_CONNECTION_NAME)
	(MQIACH_DATA_CONVERSION, "DataConversion", DisplayMapInitializer
		(MQCDC_NO_SENDER_CONVERSION, "No")
		(MQCDC_SENDER_CONVERSION, "Sender")
	)
	(MQIACH_DISC_INTERVAL, "DiscInterval")
	(MQIACH_HDR_COMPRESSION, "HeaderCompression", DisplayMapInitializer
		(MQCOMPRESS_NONE, "None")
		(MQCOMPRESS_SYSTEM, "System")
		(MQCOMPRESS_NOT_AVAILABLE, "Not Available")
		(MQCOMPRESS_RLE, "RLE")
		(MQCOMPRESS_ZLIBFAST, "Zlib Fast")
		(MQCOMPRESS_ZLIBHIGH, "Zlib High")
		(MQCOMPRESS_ANY, "Any")
		(MQCOMPRESS_SYSTEM, "System")
	)
	(MQIACH_HB_INTERVAL, "HeartbeatInterval")
	(MQIACH_KEEP_ALIVE_INTERVAL, "KeepAliveInterval")
	(MQCACH_LOCAL_ADDRESS, "LocalAddress")
	(MQIACH_LONG_RETRY, "LongRetryCount")
	(MQIACH_LONG_TIMER, "LongRetryInterval")
	(MQIACH_MAX_MSG_LENGTH, "MaxMsgLength")
	(MQCACH_MCA_NAME, "MCAName")
	(MQIACH_MCA_TYPE, "MCAType", DisplayMapInitializer
		(MQMCAT_PROCESS, "Process")
		(MQMCAT_THREAD, "Thread")
	)
	(MQCACH_MCA_USER_ID, "MCAUserIdentifier")
	(MQIACH_MSG_COMPRESSION, "MessageCompression", DisplayMapInitializer
		(MQCOMPRESS_NONE, "None")
		(MQCOMPRESS_RLE, "RLE")
		(MQCOMPRESS_ZLIBFAST, "Zlib Fast")
		(MQCOMPRESS_ZLIBHIGH, "Zlib High")
		(MQCOMPRESS_ANY, "Any")
	)
	(MQCACH_MODE_NAME, "ModeName")
	(MQCACH_MSG_EXIT_NAME, "MsgExit")
	(MQIACH_MR_COUNT, "MsgRetryCount")
	(MQCACH_MR_EXIT_NAME, "MsgRetryExit")
	(MQIACH_MR_INTERVAL, "MsgRetryInterval")
	(MQCACH_MR_EXIT_USER_DATA, "MsgRetryUserData")
	(MQCACH_MSG_EXIT_USER_DATA, "MsgUserData")
	(MQIACH_NETWORK_PRIORITY, "NetworkPriority")
	(MQIACH_NPM_SPEED, "NonPersistentMsgSpeed", DisplayMapInitializer
		(MQNPMS_FAST, "Fast")
		(MQNPMS_NORMAL, "Normal")
	)
	(MQCACH_PASSWORD, "Password")
	(MQIA_PROPERTY_CONTROL, "PropertyControl")
	(MQIACH_PUT_AUTHORITY, "PutAuthority", DisplayMapInitializer
		(MQPA_DEFAULT, "Default")
		(MQPA_CONTEXT, "Context")
	)
	(MQIACF_Q_MGR_DEFINITION_TYPE, "QMgrDefinitionType", DisplayMapInitializer
		(MQQMDT_EXPLICIT_CLUSTER_SENDER, "Explicit Cluster Sender")
		(MQQMDT_AUTO_CLUSTER_SENDER, "Auto Cluster Sender")
		(MQQMDT_CLUSTER_RECEIVER, "Cluster Receiver")
		(MQQMDT_AUTO_EXP_CLUSTER_SENDER, "Auto Exp Cluster Sender")
	)
	(MQCA_Q_MGR_IDENTIFIER)
	(MQCA_CLUSTER_Q_MGR_NAME, "QMgrName")
	(MQIACF_Q_MGR_TYPE, "QMgrType", DisplayMapInitializer
		(MQQMT_NORMAL, "Normal")
		(MQQMT_REPOSITORY, "Repository")
	)
	(MQCACH_RCV_EXIT_NAME, "ReceiveExit")
	(MQCACH_RCV_EXIT_USER_DATA, "ReceiveUserData")
	(MQCACH_SEC_EXIT_NAME, "SecurityExit")
	(MQCACH_SEC_EXIT_USER_DATA, "SecurityUserData")
	(MQCACH_SEND_EXIT_NAME, "SendExit")
	(MQCACH_SEND_EXIT_USER_DATA, "SendUserData")
	(MQIACH_SEQUENCE_NUMBER_WRAP, "SeqNumberWrap")
	(MQIACH_SHORT_RETRY, "ShortRetryCount")
	(MQIACH_SHORT_TIMER, "ShortRetryInterval")
	(MQCACH_SSL_CIPHER_SPEC, "SSLCipherSpec")
	(MQIACH_SSL_CLIENT_AUTH, "SSLClientAuth", DisplayMapInitializer
		(MQSCA_REQUIRED, "Required")
		(MQSCA_OPTIONAL, "Optional")
	)
	(MQCACH_SSL_PEER_NAME, "SSLPeerName")
	(MQIACF_SUSPEND, "Suspend", DisplayMapInitializer
		(MQSUS_NO, "No")
		(MQSUS_YES, "Yes")
	)
	(MQCACH_TP_NAME)
	(MQCA_XMIT_Q_NAME)
	(MQIACH_XMIT_PROTOCOL_TYPE)
#ifdef MQIA_USE_DEAD_LETTER_Q
	(MQIA_USE_DEAD_LETTER_Q)
#endif
	(MQCACH_USER_ID)
	// Extended Response
	(MQBACF_RESPONSE_ID)
	(MQCACF_RESPONSE_Q_MGR_NAME)
;

Dictionary connectionDictionary = Dictionary()
	(MQCACF_APPL_DESC)
	(MQCACF_APPL_TAG)
	(MQIA_APPL_TYPE)
	(MQCACF_ASID)
	(MQIACF_ASYNC_STATE)
	(MQCACH_CHANNEL_NAME)
	(MQBACF_CONNECTION_ID, "ConnectionId")
	(MQCACH_CONNECTION_NAME)
	(MQIACF_CONNECT_OPTIONS, "ConnectOptions")
	(MQIACF_CONN_INFO_TYPE, "ConnInfoType", DisplayMapInitializer
		(MQIACF_CONN_INFO_CONN, "Connection")
		(MQIACF_CONN_INFO_HANDLE, "Handle")
		(MQIACF_CONN_INFO_ALL, "All")
	)
	(MQCACF_DESTINATION, "Destination")
	(MQCACF_DESTINATION_Q_MGR, "DestinationQueueManager")
	(MQBACF_GENERIC_CONNECTION_ID, "GenericConnectionId")
	(MQIACF_HANDLE_STATE, "HandleState", DisplayMapInitializer
		(MQHSTATE_ACTIVE, "Active")
		(MQHSTATE_INACTIVE, "Inactive")
	)
	(MQCACF_OBJECT_NAME)
	(MQIACF_OBJECT_TYPE)
	(MQIACF_OPEN_OPTIONS)
	(MQCACF_ORIGIN_NAME, "OriginName")
	(MQBACF_ORIGIN_UOW_ID, "OriginUOWId")
	(MQIACF_PROCESS_ID)
	(MQCACF_PSB_NAME)
	(MQCACF_PST_ID)
	(MQBACF_Q_MGR_UOW_ID, "QMgrUOWId")
	(MQIA_QSG_DISP)
	(MQIA_READ_AHEAD, "ReadAhead", DisplayMapInitializer
		(MQREADA_NO, "No")
		(MQREADA_YES, "Yes")
		(MQREADA_BACKLOG, "Backlog")
		(MQREADA_INHIBITED, "Inhibited")
	)
	(MQCACF_UOW_LOG_EXTENT_NAME, "StartUOWLogExtent")
	(MQBACF_SUB_ID, "SubID")
	(MQCACF_SUB_NAME, "SubName")
	(MQIACF_THREAD_ID)
	(MQCA_TOPIC_STRING, "TopicString")
	(MQCACF_TRANSACTION_ID)
	(MQBACF_EXTERNAL_UOW_ID, "UOWIdentifier")
	(MQCACF_UOW_LOG_START_DATE, "UOWLogStartDate")
	(MQCACF_UOW_LOG_START_TIME, "UOWLogStartTime")
	(MQCACF_UOW_START_DATE, "UOWStartDate")
	(MQCACF_UOW_START_TIME, "UOWStartTime")
	(MQIACF_UOW_STATE, "UOWState", DisplayMapInitializer
		(MQUOWST_NONE, "None")
		(MQUOWST_ACTIVE, "Active")
		(MQUOWST_PREPARED, "Prepared")
		(MQUOWST_UNRESOLVED, "Unresolved")
	)
	(MQIACF_UOW_TYPE, "UOWType", DisplayMapInitializer
		(MQUOWT_Q_MGR, "Queuemanager")
		(MQUOWT_CICS, "CICS")
		(MQUOWT_RRS, "RRS")
		(MQUOWT_IMS, "IMS")
		(MQUOWT_XA, "XA")
	)
	(MQIA_UR_DISP, "URDisposition", DisplayMapInitializer
		(MQQSGD_ALL, "All")
		(MQQSGD_GROUP, "Group")
		(MQQSGD_Q_MGR, "Queuemanager")
	)
	(MQCACF_USER_IDENTIFIER)
	// Extended Response
	(MQBACF_RESPONSE_ID)
	(MQCACF_RESPONSE_Q_MGR_NAME)
;

Dictionary listenerDictionary = Dictionary()
	(MQIACH_ADAPTER, "Adapter")
	(MQCA_ALTERATION_DATE)
	(MQCA_ALTERATION_TIME)
	(MQIACH_BACKLOG, "Backlog")
	(MQIACH_COMMAND_COUNT, "Commands")
	(MQCACH_IP_ADDRESS, "IPAddress")
	(MQCACH_LISTENER_DESC, "ListenerDesc")
	(MQCACH_LISTENER_NAME, "ListenerName")
	(MQCACH_LOCAL_NAME, "LocalName")
	(MQIACH_NAME_COUNT, "NetbiosNames")
	(MQIACH_PORT, "Port")
	(MQIACF_PROCESS_ID)
	(MQIACH_SESSION_COUNT, "Sessions")
	(MQIACH_SOCKET, "Socket")
	(MQIACH_LISTENER_CONTROL, "StartMode", DisplayMapInitializer
		(MQSVC_CONTROL_MANUAL, "Manual")
		(MQSVC_CONTROL_Q_MGR, "Qmgr")
		(MQSVC_CONTROL_Q_MGR_START, "Qmgr Start")
	)
	(MQCACH_TP_NAME)
	(MQIACH_XMIT_PROTOCOL_TYPE)
	// Extended Response
	(MQBACF_RESPONSE_ID)
	(MQCACF_RESPONSE_Q_MGR_NAME)
;

Dictionary listenerStatusDictionary = Dictionary()
	(MQIACH_ADAPTER, "Adapter")
	(MQIACH_BACKLOG, "Backlog")
	(MQIACH_COMMAND_COUNT, "Commands")
	(MQCACH_IP_ADDRESS, "IPAddress")
	(MQCACH_LISTENER_DESC, "ListenerDesc")
	(MQCACH_LISTENER_NAME, "ListenerName")
	(MQCACH_LOCAL_NAME, "LocalName")
	(MQIACH_NAME_COUNT, "NetbiosNames")
	(MQIACH_PORT, "Port")
	(MQIACF_PROCESS_ID)
	(MQIACH_SOCKET, "Socket")
	(MQIACH_LISTENER_CONTROL, "StartMode", DisplayMapInitializer
		(MQSVC_CONTROL_MANUAL, "Manual")
		(MQSVC_CONTROL_Q_MGR, "Qmgr")
		(MQSVC_CONTROL_Q_MGR_START, "Qmgr Start")
	)
	(MQCACH_LISTENER_START_DATE, "StartDate")
	(MQCACH_LISTENER_START_TIME, "StartTime")
	(MQIACH_LISTENER_STATUS, "Status", DisplayMapInitializer
		(MQSVC_STATUS_STARTING, "Starting")
		(MQSVC_STATUS_RUNNING, "Running")
		(MQSVC_STATUS_STOPPING, "Stopping")
		(MQSVC_STATUS_RETRYING, "Retrying")
		(MQSVC_STATUS_STOPPED, "Stopped")
	)
	(MQCACH_TP_NAME)
	(MQIACH_XMIT_PROTOCOL_TYPE)
	// Extended Response
	(MQBACF_RESPONSE_ID)
	(MQCACF_RESPONSE_Q_MGR_NAME)
;

Dictionary topicDictionary = Dictionary()
	(MQCA_ALTERATION_DATE)
	(MQCA_ALTERATION_TIME)
	(MQCA_CLUSTER_NAME)
	(MQCA_CUSTOM)
	(MQIA_TOPIC_DEF_PERSISTENCE, "DefPersistence", DisplayMapInitializer
		(MQPER_PERSISTENCE_AS_PARENT, "As Parent")
		(MQPER_PERSISTENT, "Persistent")
		(MQPER_NOT_PERSISTENT, "Non Persistent")
	)
	(MQIA_DEF_PRIORITY)
	(MQIA_DEF_PUT_RESPONSE_TYPE, "DefPutResponse", DisplayMapInitializer
		(MQPRT_ASYNC_RESPONSE, "Async Response")
		(MQPRT_RESPONSE_AS_PARENT, "As Parent")
		(MQPRT_SYNC_RESPONSE, "Sync Response")
	)
	(MQCA_MODEL_DURABLE_Q, "DurableModelQName")
	(MQIA_DURABLE_SUB, "DurableSubscriptions", DisplayMapInitializer
		(MQSUB_DURABLE_AS_PARENT, "As Parent")
		(MQSUB_DURABLE_ALLOWED, "Allowed")
		(MQSUB_DURABLE_INHIBITED, "Inhibited")
	)
	(MQIA_INHIBIT_PUB, "InhibitPublications", DisplayMapInitializer
		(MQTA_PUB_AS_PARENT, "As Parent")
		(MQTA_PUB_INHIBITED, "Inhibited")
		(MQTA_PUB_ALLOWED, "Allowed")
	)
	(MQIA_INHIBIT_SUB, "InhibitSubscriptions", DisplayMapInitializer
		(MQTA_SUB_AS_PARENT, "As Parent")
		(MQTA_SUB_INHIBITED, "Inhibited")
		(MQTA_SUB_ALLOWED, "Allowed")
	)
	(MQCA_MODEL_NON_DURABLE_Q, "NonDurableModelQName")
	(MQIA_NPM_DELIVERY, "NonPersistentMsgDelivery", DisplayMapInitializer
		(MQDLV_AS_PARENT, "As Parent")
		(MQDLV_ALL, "ALL")
		(MQDLV_ALL_DUR, "All Durable")
		(MQDLV_ALL_AVAIL, "All Available")
	)
	(MQIA_PM_DELIVERY, "PersistentMsgDelivery", DisplayMapInitializer
		(MQDLV_AS_PARENT, "As Parent")
		(MQDLV_ALL, "ALL")
		(MQDLV_ALL_DUR, "All Durable")
		(MQDLV_ALL_AVAIL, "All Available")
	)
	(MQIA_PROXY_SUB, "ProxySubscriptions", DisplayMapInitializer
		(MQTA_PROXY_SUB_FORCE, "Sub Force")
		(MQTA_PROXY_SUB_FIRSTUSE, "Sub Firstuse")
	)
	(MQIA_PUB_SCOPE, "PublicationScope", DisplayMapInitializer
		(MQSCOPE_ALL, "All")
		(MQSCOPE_AS_PARENT, "As Parent")
		(MQSCOPE_QMGR, "Qmgr")
	)
	(MQCA_CLUSTER_Q_MGR_NAME)
	(MQIA_SUB_SCOPE, "SubscriptionScope", DisplayMapInitializer
		(MQSCOPE_ALL, "All")
		(MQSCOPE_AS_PARENT, "As Parent")
		(MQSCOPE_QMGR, "Qmgr")
	)
	(MQCA_TOPIC_DESC, "TopicDesc")
	(MQCA_TOPIC_NAME, "TopicName")
	(MQCA_TOPIC_STRING)
	(MQIA_TOPIC_TYPE, "TopicType", DisplayMapInitializer
		(MQTOPT_LOCAL, "All")
		(MQTOPT_LOCAL, "Local")
		(MQTOPT_CLUSTER, "Cluster")
	)
#ifdef MQIA_USE_DEAD_LETTER_Q
	(MQIA_USE_DEAD_LETTER_Q)
#endif
	(MQIA_WILDCARD_OPERATION, "WildcardOperation", DisplayMapInitializer
		(MQTA_PASSTHRU, "Passthru")
		(MQTA_BLOCK, "Block")
	)
	// Extended Response
	(MQBACF_RESPONSE_ID)
	(MQCACF_RESPONSE_Q_MGR_NAME)
;

Dictionary topicStatusDictionary = Dictionary()
	(MQCA_CLUSTER_NAME)
	(MQIA_TOPIC_DEF_PERSISTENCE)
	(MQIA_DEF_PUT_RESPONSE_TYPE)
	(MQIA_DEF_PRIORITY)
	(MQIA_DURABLE_SUB)
	(MQIA_INHIBIT_PUB)
	(MQIA_INHIBIT_SUB)
	(MQCA_ADMIN_TOPIC_NAME, "AdminTopicNames")
	(MQCA_MODEL_DURABLE_Q)
	(MQCA_MODEL_NON_DURABLE_Q)
	(MQIA_PM_DELIVERY)
	(MQIA_NPM_DELIVERY)
	(MQIACF_RETAINED_PUBLICATION, "RetainedPublication")
	(MQIA_PUB_COUNT, "PublishCount")
	(MQIA_SUB_COUNT, "SubscriptionCount")
	(MQIA_SUB_SCOPE)
	(MQIA_PUB_SCOPE)
#ifdef MQIA_USE_DEAD_LETTER_Q
	(MQIA_USE_DEAD_LETTER_Q)
#endif	
	(MQBACF_SUB_ID)
	(MQCACF_SUB_USER_ID, "SubscriptionUserId")
	(MQIACF_DURABLE_SUBSCRIPTION, "Durable", DisplayMapInitializer
		(MQSUB_DURABLE_YES, "Yes")
		(MQSUB_DURABLE_NO, "No")
	)
	(MQIACF_SUB_TYPE, "SubscriptionType", DisplayMapInitializer
		(MQSUBTYPE_PROXY, "Proxy")
		(MQSUBTYPE_ADMIN, "Admin")
		(MQSUBTYPE_API, "API")
	)
	(MQCA_RESUME_DATE, "ResumeDate")
	(MQCA_RESUME_TIME, "ResumeTime")
	(MQCACF_LAST_MSG_DATE, "LastMessageDate")
	(MQCACF_LAST_MSG_TIME, "LastMessageTime")
	(MQCACF_LAST_PUB_DATE, "LastPublicationDate")
	(MQCACF_LAST_PUB_TIME, "LastPublicationTime")
	(MQIACF_PUBLISH_COUNT, "NumberOfPublishes")
	(MQBACF_CONNECTION_ID)
;

Dictionary eventDictionary = Dictionary()
	(MQCA_ADMIN_TOPIC_NAME)
	(MQIA_APPL_TYPE)
	(MQCACF_APPL_NAME, "ApplName")
	(MQCA_AUTH_INFO_NAME, "AuthInfoName")
	(MQIACF_AUX_ERROR_DATA_INT_1, "AuxErrorDataInt1")
	(MQIACF_AUX_ERROR_DATA_INT_2, "AuxErrorDataInt2")
	(MQCACF_AUX_ERROR_DATA_STR_1, "AuxErrorDataStr1")
	(MQCACF_AUX_ERROR_DATA_STR_2, "AuxErrorDataStr2")
	(MQCACF_AUX_ERROR_DATA_STR_3, "AuxErrorDataStr3")
	(MQCA_BASE_OBJECT_NAME, "BaseObjectName")
	(MQIA_BASE_TYPE)
	(MQCACF_BRIDGE_NAME, "BridgeName")
	(MQIACF_BRIDGE_TYPE, "BridgeType", DisplayMapInitializer
		(MQBT_OTMA, "OTMA")
	)
	(MQCA_CF_STRUC_NAME, "CFStrucName")
	(MQCACH_CHANNEL_NAME)
	(MQIACH_CHANNEL_TYPE)
	(MQCACH_CLIENT_USER_ID, "ClientUserIdentifier")
	(MQIACF_COMMAND, "Command", DisplayMapInitializer
		MQCONST2STR(MQCMD_CHANGE_Q_MGR             )
		MQCONST2STR(MQCMD_INQUIRE_Q_MGR            )
		MQCONST2STR(MQCMD_CHANGE_PROCESS           )
		MQCONST2STR(MQCMD_COPY_PROCESS             )
		MQCONST2STR(MQCMD_CREATE_PROCESS           )
		MQCONST2STR(MQCMD_DELETE_PROCESS           )
		MQCONST2STR(MQCMD_INQUIRE_PROCESS          )
		MQCONST2STR(MQCMD_CHANGE_Q                 )
		MQCONST2STR(MQCMD_CLEAR_Q                  )
		MQCONST2STR(MQCMD_COPY_Q                   )
		MQCONST2STR(MQCMD_CREATE_Q                 )
		MQCONST2STR(MQCMD_DELETE_Q                 )
		MQCONST2STR(MQCMD_INQUIRE_Q                )
		MQCONST2STR(MQCMD_REFRESH_Q_MGR            )
		MQCONST2STR(MQCMD_RESET_Q_STATS            )
		MQCONST2STR(MQCMD_INQUIRE_Q_NAMES          )
		MQCONST2STR(MQCMD_INQUIRE_PROCESS_NAMES    )
		MQCONST2STR(MQCMD_INQUIRE_CHANNEL_NAMES    )
		MQCONST2STR(MQCMD_CHANGE_CHANNEL           )
		MQCONST2STR(MQCMD_COPY_CHANNEL             )
		MQCONST2STR(MQCMD_CREATE_CHANNEL           )
		MQCONST2STR(MQCMD_DELETE_CHANNEL           )
		MQCONST2STR(MQCMD_INQUIRE_CHANNEL          )
		MQCONST2STR(MQCMD_PING_CHANNEL             )
		MQCONST2STR(MQCMD_RESET_CHANNEL            )
		MQCONST2STR(MQCMD_START_CHANNEL            )
		MQCONST2STR(MQCMD_STOP_CHANNEL             )
		MQCONST2STR(MQCMD_START_CHANNEL_INIT       )
		MQCONST2STR(MQCMD_START_CHANNEL_LISTENER   )
		MQCONST2STR(MQCMD_CHANGE_NAMELIST          )
		MQCONST2STR(MQCMD_COPY_NAMELIST            )
		MQCONST2STR(MQCMD_CREATE_NAMELIST          )
		MQCONST2STR(MQCMD_DELETE_NAMELIST          )
		MQCONST2STR(MQCMD_INQUIRE_NAMELIST         )
		MQCONST2STR(MQCMD_INQUIRE_NAMELIST_NAMES   )
		MQCONST2STR(MQCMD_ESCAPE                   )
		MQCONST2STR(MQCMD_RESOLVE_CHANNEL          )
		MQCONST2STR(MQCMD_PING_Q_MGR               )
		MQCONST2STR(MQCMD_INQUIRE_Q_STATUS         )
		MQCONST2STR(MQCMD_INQUIRE_CHANNEL_STATUS   )
		MQCONST2STR(MQCMD_CONFIG_EVENT             )
		MQCONST2STR(MQCMD_Q_MGR_EVENT              )
		MQCONST2STR(MQCMD_PERFM_EVENT              )
		MQCONST2STR(MQCMD_CHANNEL_EVENT            )
		MQCONST2STR(MQCMD_DELETE_PUBLICATION       )
		MQCONST2STR(MQCMD_DEREGISTER_PUBLISHER     )
		MQCONST2STR(MQCMD_DEREGISTER_SUBSCRIBER    )
		MQCONST2STR(MQCMD_PUBLISH                  )
		MQCONST2STR(MQCMD_REGISTER_PUBLISHER       )
		MQCONST2STR(MQCMD_REGISTER_SUBSCRIBER      )
		MQCONST2STR(MQCMD_REQUEST_UPDATE           )
		MQCONST2STR(MQCMD_BROKER_INTERNAL          )
		MQCONST2STR(MQCMD_ACTIVITY_MSG             )
		MQCONST2STR(MQCMD_INQUIRE_CLUSTER_Q_MGR    )
		MQCONST2STR(MQCMD_RESUME_Q_MGR_CLUSTER     )
		MQCONST2STR(MQCMD_SUSPEND_Q_MGR_CLUSTER    )
		MQCONST2STR(MQCMD_REFRESH_CLUSTER          )
		MQCONST2STR(MQCMD_RESET_CLUSTER            )
		MQCONST2STR(MQCMD_TRACE_ROUTE              )
		MQCONST2STR(MQCMD_REFRESH_SECURITY         )
		MQCONST2STR(MQCMD_CHANGE_AUTH_INFO         )
		MQCONST2STR(MQCMD_COPY_AUTH_INFO           )
		MQCONST2STR(MQCMD_CREATE_AUTH_INFO         )
		MQCONST2STR(MQCMD_DELETE_AUTH_INFO         )
		MQCONST2STR(MQCMD_INQUIRE_AUTH_INFO        )
		MQCONST2STR(MQCMD_INQUIRE_AUTH_INFO_NAMES  )
		MQCONST2STR(MQCMD_INQUIRE_CONNECTION       )
		MQCONST2STR(MQCMD_STOP_CONNECTION          )
		MQCONST2STR(MQCMD_INQUIRE_AUTH_RECS        )
		MQCONST2STR(MQCMD_INQUIRE_ENTITY_AUTH      )
		MQCONST2STR(MQCMD_DELETE_AUTH_REC          )
		MQCONST2STR(MQCMD_SET_AUTH_REC             )
		MQCONST2STR(MQCMD_LOGGER_EVENT             )
		MQCONST2STR(MQCMD_RESET_Q_MGR              )
		MQCONST2STR(MQCMD_CHANGE_LISTENER          )
		MQCONST2STR(MQCMD_COPY_LISTENER            )
		MQCONST2STR(MQCMD_CREATE_LISTENER          )
		MQCONST2STR(MQCMD_DELETE_LISTENER          )
		MQCONST2STR(MQCMD_INQUIRE_LISTENER         )
		MQCONST2STR(MQCMD_INQUIRE_LISTENER_STATUS  )
		MQCONST2STR(MQCMD_COMMAND_EVENT            )
		MQCONST2STR(MQCMD_CHANGE_SECURITY          )
		MQCONST2STR(MQCMD_CHANGE_CF_STRUC          )
		MQCONST2STR(MQCMD_CHANGE_STG_CLASS         )
		MQCONST2STR(MQCMD_CHANGE_TRACE             )
		MQCONST2STR(MQCMD_ARCHIVE_LOG              )
		MQCONST2STR(MQCMD_BACKUP_CF_STRUC          )
		MQCONST2STR(MQCMD_CREATE_BUFFER_POOL       )
		MQCONST2STR(MQCMD_CREATE_PAGE_SET          )
		MQCONST2STR(MQCMD_CREATE_CF_STRUC          )
		MQCONST2STR(MQCMD_CREATE_STG_CLASS         )
		MQCONST2STR(MQCMD_COPY_CF_STRUC            )
		MQCONST2STR(MQCMD_COPY_STG_CLASS           )
		MQCONST2STR(MQCMD_DELETE_CF_STRUC          )
		MQCONST2STR(MQCMD_DELETE_STG_CLASS         )
		MQCONST2STR(MQCMD_INQUIRE_ARCHIVE          )
		MQCONST2STR(MQCMD_INQUIRE_CF_STRUC         )
		MQCONST2STR(MQCMD_INQUIRE_CF_STRUC_STATUS  )
		MQCONST2STR(MQCMD_INQUIRE_CMD_SERVER       )
		MQCONST2STR(MQCMD_INQUIRE_CHANNEL_INIT     )
		MQCONST2STR(MQCMD_INQUIRE_QSG              )
		MQCONST2STR(MQCMD_INQUIRE_LOG              )
		MQCONST2STR(MQCMD_INQUIRE_SECURITY         )
		MQCONST2STR(MQCMD_INQUIRE_STG_CLASS        )
		MQCONST2STR(MQCMD_INQUIRE_SYSTEM           )
		MQCONST2STR(MQCMD_INQUIRE_THREAD           )
		MQCONST2STR(MQCMD_INQUIRE_TRACE            )
		MQCONST2STR(MQCMD_INQUIRE_USAGE            )
		MQCONST2STR(MQCMD_MOVE_Q                   )
		MQCONST2STR(MQCMD_RECOVER_BSDS             )
		MQCONST2STR(MQCMD_RECOVER_CF_STRUC         )
		MQCONST2STR(MQCMD_RESET_TPIPE              )
		MQCONST2STR(MQCMD_RESOLVE_INDOUBT          )
		MQCONST2STR(MQCMD_RESUME_Q_MGR             )
		MQCONST2STR(MQCMD_REVERIFY_SECURITY        )
		MQCONST2STR(MQCMD_SET_ARCHIVE              )
		MQCONST2STR(MQCMD_SET_LOG                  )
		MQCONST2STR(MQCMD_SET_SYSTEM               )
		MQCONST2STR(MQCMD_START_CMD_SERVER         )
		MQCONST2STR(MQCMD_START_Q_MGR              )
		MQCONST2STR(MQCMD_START_TRACE              )
		MQCONST2STR(MQCMD_STOP_CHANNEL_INIT        )
		MQCONST2STR(MQCMD_STOP_CHANNEL_LISTENER    )
		MQCONST2STR(MQCMD_STOP_CMD_SERVER          )
		MQCONST2STR(MQCMD_STOP_Q_MGR               )
		MQCONST2STR(MQCMD_STOP_TRACE               )
		MQCONST2STR(MQCMD_SUSPEND_Q_MGR            )
		MQCONST2STR(MQCMD_INQUIRE_CF_STRUC_NAMES   )
		MQCONST2STR(MQCMD_INQUIRE_STG_CLASS_NAMES  )
		MQCONST2STR(MQCMD_CHANGE_SERVICE           )
		MQCONST2STR(MQCMD_COPY_SERVICE             )
		MQCONST2STR(MQCMD_CREATE_SERVICE           )
		MQCONST2STR(MQCMD_DELETE_SERVICE           )
		MQCONST2STR(MQCMD_INQUIRE_SERVICE          )
		MQCONST2STR(MQCMD_INQUIRE_SERVICE_STATUS   )
		MQCONST2STR(MQCMD_START_SERVICE            )
		MQCONST2STR(MQCMD_STOP_SERVICE             )
		MQCONST2STR(MQCMD_DELETE_BUFFER_POOL       )
		MQCONST2STR(MQCMD_DELETE_PAGE_SET          )
		MQCONST2STR(MQCMD_CHANGE_BUFFER_POOL       )
		MQCONST2STR(MQCMD_CHANGE_PAGE_SET          )
		MQCONST2STR(MQCMD_INQUIRE_Q_MGR_STATUS     )
		MQCONST2STR(MQCMD_CREATE_LOG               )
		MQCONST2STR(MQCMD_STATISTICS_MQI           )
		MQCONST2STR(MQCMD_STATISTICS_Q             )
		MQCONST2STR(MQCMD_STATISTICS_CHANNEL       )
		MQCONST2STR(MQCMD_ACCOUNTING_MQI           )
		MQCONST2STR(MQCMD_ACCOUNTING_Q             )
		MQCONST2STR(MQCMD_INQUIRE_AUTH_SERVICE     )
		MQCONST2STR(MQCMD_CHANGE_TOPIC             )
		MQCONST2STR(MQCMD_COPY_TOPIC               )
		MQCONST2STR(MQCMD_CREATE_TOPIC             )
		MQCONST2STR(MQCMD_DELETE_TOPIC             )
		MQCONST2STR(MQCMD_INQUIRE_TOPIC            )
		MQCONST2STR(MQCMD_INQUIRE_TOPIC_NAMES      )
		MQCONST2STR(MQCMD_INQUIRE_SUBSCRIPTION     )
		MQCONST2STR(MQCMD_CREATE_SUBSCRIPTION      )
		MQCONST2STR(MQCMD_CHANGE_SUBSCRIPTION      )
		MQCONST2STR(MQCMD_DELETE_SUBSCRIPTION      )
		MQCONST2STR(MQCMD_COPY_SUBSCRIPTION        )
		MQCONST2STR(MQCMD_INQUIRE_SUB_STATUS       )
		MQCONST2STR(MQCMD_INQUIRE_TOPIC_STATUS     )
		MQCONST2STR(MQCMD_CLEAR_TOPIC_STRING       )
		MQCONST2STR(MQCMD_INQUIRE_PUBSUB_STATUS    )
		MQCONST2STR(MQCMD_INQUIRE_SMDS             )
		MQCONST2STR(MQCMD_CHANGE_SMDS              )
		MQCONST2STR(MQCMD_RESET_SMDS               )
		MQCONST2STR(MQCMD_CREATE_COMM_INFO         )
		MQCONST2STR(MQCMD_INQUIRE_COMM_INFO        )
		MQCONST2STR(MQCMD_CHANGE_COMM_INFO         )
		MQCONST2STR(MQCMD_COPY_COMM_INFO           )
		MQCONST2STR(MQCMD_DELETE_COMM_INFO         )
		MQCONST2STR(MQCMD_PURGE_CHANNEL            )
		MQCONST2STR(MQCMD_MQXR_DIAGNOSTICS         )
		MQCONST2STR(MQCMD_START_SMDSCONN           )
		MQCONST2STR(MQCMD_STOP_SMDSCONN            )
		MQCONST2STR(MQCMD_INQUIRE_SMDSCONN         )
		MQCONST2STR(MQCMD_INQUIRE_MQXR_STATUS      )
		MQCONST2STR(MQCMD_START_CLIENT_TRACE       )
		MQCONST2STR(MQCMD_STOP_CLIENT_TRACE        )
		MQCONST2STR(MQCMD_SET_CHLAUTH_REC          )
		MQCONST2STR(MQCMD_INQUIRE_CHLAUTH_RECS     )
		MQCONST2STR(MQCMD_INQUIRE_PROT_POLICY      )
		MQCONST2STR(MQCMD_CREATE_PROT_POLICY       )
		MQCONST2STR(MQCMD_DELETE_PROT_POLICY       )
		MQCONST2STR(MQCMD_CHANGE_PROT_POLICY       )
		MQCONST2STR(MQCMD_ACTIVITY_TRACE           )
		MQCONST2STR(MQCMD_RESET_CF_STRUC           )
		MQCONST2STR(MQCMD_INQUIRE_XR_CAPABILITY    )
	)
	(MQGACF_COMMAND_CONTEXT, "CommandContext")
	(MQGACF_COMMAND_DATA, "CommandData")
	(MQCACF_COMMAND_MQSC, "CommandMQSC")
	(MQCA_COMM_INFO_NAME, "CommInfoName")
	(MQCACH_CONNECTION_NAME)
	(MQIACF_CONV_REASON_CODE, "ConversionReasonCode", DisplayMapInitializer
		MQCONST2STR(MQRC_CONVERTED_MSG_TOO_BIG)
		MQCONST2STR(MQRC_FORMAT_ERROR)
		MQCONST2STR(MQRC_NOT_CONVERTED)
		MQCONST2STR(MQRC_SOURCE_CCSID_ERROR)
		MQCONST2STR(MQRC_SOURCE_DECIMAL_ENC_ERROR)
		MQCONST2STR(MQRC_SOURCE_FLOAT_ENC_ERROR)
		MQCONST2STR(MQRC_SOURCE_INTEGER_ENC_ERROR)
		MQCONST2STR(MQRC_TARGET_CCSID_ERROR)
		MQCONST2STR(MQRC_TARGET_DECIMAL_ENC_ERROR)
		MQCONST2STR(MQRC_TARGET_FLOAT_ENC_ERROR)
		MQCONST2STR(MQRC_TARGET_INTEGER_ENC_ERROR)
		MQCONST2STR(MQRC_TRUNCATED_MSG_ACCEPTED)
		MQCONST2STR(MQRC_TRUNCATED_MSG_FAILED)
	)
	(MQCACF_CURRENT_LOG_EXTENT_NAME, "CurrentLogExtent")
	(MQIACF_ERROR_IDENTIFIER, "ErrorIdentifier")
	(MQBACF_EVENT_ACCOUNTING_TOKEN, "EventAccountingToken")
	(MQCACF_EVENT_APPL_IDENTITY, "EventApplIdentity")
	(MQCACF_EVENT_APPL_NAME, "EventApplName")
	(MQCACF_EVENT_APPL_ORIGIN, "EventApplOrigin")
	(MQIACF_EVENT_APPL_TYPE, "EventApplType", DisplayMapInitializer
		(MQAT_UNKNOWN, "Unknown")
		(MQAT_NO_CONTEXT, "No Context")
		(MQAT_CICS, "CICS Transaction")
		(MQAT_MVS, "Z/OS")
		(MQAT_IMS, "IMS Transaction")
		(MQAT_OS2, "OS/2")
		(MQAT_DOS, "DOS")
		(MQAT_UNIX, "Unix")
		(MQAT_QMGR, "QueueManager Process")
		(MQAT_OS400, "OS/400")
		(MQAT_WINDOWS, "Windows")
		(MQAT_CICS_VSE, "CICS VSE")
		(MQAT_WINDOWS_NT, "Windows NT")
		(MQAT_VMS, "VMS")
		(MQAT_GUARDIAN, "Guardian")
		(MQAT_NSK, "NSK")
		(MQAT_VOS, "VOS")
		(MQAT_OPEN_TP1, "Open TP1")
		(MQAT_VM, "VM")
		(MQAT_IMS_BRIDGE, "IMS Bridge")
		(MQAT_XCF, "XCF")
		(MQAT_CICS_BRIDGE, "CICS Bridge")
		(MQAT_NOTES_AGENT, "Notes Agent")
		(MQAT_TPF, "TPF")
		(MQAT_USER, "User Application")
		(MQAT_BROKER, "Broker")
		(MQAT_JAVA, "Java")
		(MQAT_DQM, "DQM")
		(MQAT_CHANNEL_INITIATOR, "Channel Initiator")
		(MQAT_WLM, "WLM")
		(MQAT_BATCH, "Batch Application")
		(MQAT_RRS_BATCH, "RRS-coordinated Batch Application")
		(MQAT_SIB, "SIB")
		(MQAT_SYSTEM_EXTENSION, "System Extension")
	)
	(MQCACF_EVENT_USER_ID, "EventUserId")
	(MQIACF_EVENT_ORIGIN, "EventOrigin", DisplayMapInitializer
		(MQEVO_CONSOLE, "Console")
		(MQEVO_INIT, "Initialization")
		(MQEVO_INTERNAL, "Internal")
		(MQEVO_MQSET, "MQSET")
		(MQEVO_MSG, "Command message")
		(MQEVO_OTHER, "Other")
	)
	(MQCACF_EVENT_Q_MGR, "EventQMgr")
	(MQCACH_FORMAT_NAME, "Format")
	(MQIA_HIGH_Q_DEPTH, "HighQDepth")
	(MQCACH_LISTENER_NAME, "ListenerName")
	(MQCACF_LOG_PATH, "LogPath")
	(MQCA_NAMELIST_NAME, "NamelistName")
	(MQIA_ACTIVE_CHANNELS)
	(MQIA_MAX_CHANNELS)
	(MQIACH_MAX_INSTS_PER_CLIENT, "MaximumClientInstances")
	(MQIACH_MAX_INSTANCES, "MaximumInstances")
	(MQCACF_MEDIA_LOG_EXTENT_NAME, "MediaLogExtentName")
	(MQIA_MSG_ENQ_COUNT, "MsgEnqCount")
	(MQIA_MSG_DEQ_COUNT, "MsgDeqCount")
	(MQCACF_OBJECT_Q_MGR_NAME, "ObjectQMgrName")
	(MQIACF_OBJECT_TYPE, "ObjectType", DisplayMapInitializer
		(MQOT_ALL, "All")
		(MQOT_CHANNEL, "Channel")
		(MQOT_CHLAUTH, "Channel Authentication Record")
		(MQOT_NAMELIST, "Namelist")
		(MQOT_NONE, "None")
		(MQOT_PROCESS, "Process")
		(MQOT_Q, "Queue")
		(MQOT_Q_MGR, "Queuemanager")
		(MQOT_STORAGE_CLASS, "Storage Class")
		(MQOT_AUTH_INFO, "Authentication Information")
		(MQOT_CF_STRUC, "CF Structure")
		(MQOT_TOPIC, "Topic")
		(MQOT_COMM_INFO, "Communication Information")
		(MQOT_LISTENER, "Listener")
		(MQOT_CLNTCONN_CHANNEL, "Client-connection Channel")
		(MQOT_REMOTE_Q_MGR_NAME, "Remote Queuemanager")
		(MQOT_SERVICE, "Service")
		(MQOT_ALIAS_Q, "Alias Queue")
		(MQOT_MODEL_Q, "Model Queue")
		(MQOT_LOCAL_Q, "Local Queue")
		(MQOT_REMOTE_Q, "Remote Queue")
		(MQOT_SENDER_CHANNEL, "Sender Channel")
		(MQOT_SERVER_CHANNEL, "Server Channel")
		(MQOT_REQUESTER_CHANNEL, "Requester Channel")
		(MQOT_RECEIVER_CHANNEL, "Receiver Channel")
		(MQOT_CURRENT_CHANNEL, "Current Channel")
		(MQOT_SAVED_CHANNEL, "Saved Channel")
		(MQOT_SVRCONN_CHANNEL, "Server-connection Channel")
		(MQOT_CLNTCONN_CHANNEL, "Client-connection Channel")
		(MQOT_SHORT_CHANNEL, "Short Channel")
		(MQOT_PROT_POLICY, "Protection Policy")
	)
	(MQIACF_OPEN_OPTIONS)
	(MQCA_PROCESS_NAME, "ProcessName")
	(MQCA_Q_NAME, "QName")
	(MQCA_Q_MGR_NAME)
	(MQIA_QSG_DISP)
	(MQIA_Q_TYPE)
	(MQCACH_SSL_HANDSHAKE_STAGE, "SSLHandshakeStage")
	(MQCACH_SSL_PEER_NAME, "SSLPeerName")
	(MQIACH_SSL_RETURN_CODE, "SSLReturnCode")
	(MQCA_STORAGE_CLASS)
	(MQCACF_SUB_NAME)
	(MQIACF_SUB_OPTIONS, "SubOptions")
	(MQIA_TIME_SINCE_RESET, "TimeSinceReset")
	(MQCA_TOPIC_NAME, "TopicName")
	(MQCA_TOPIC_STRING)
	(MQIACF_REASON_QUALIFIER, "ReasonQualifier", DisplayMapInitializer
		(MQRQ_CONN_NOT_AUTHORIZED, "Conn Not Authorized")
		(MQRQ_OPEN_NOT_AUTHORIZED, "Open Not Authorized")
		(MQRQ_CLOSE_NOT_AUTHORIZED, "Close Not Authorized")
		(MQRQ_CMD_NOT_AUTHORIZED, "Cmd Not Authorized")
		(MQRQ_Q_MGR_STOPPING, "Qmgr Stopping")
		(MQRQ_Q_MGR_QUIESCING, "Qmgr Quiescing")
		(MQRQ_CHANNEL_STOPPED_OK, "Channel Stopped OK")
		(MQRQ_CHANNEL_STOPPED_ERROR, "Channel Stopped Error")
		(MQRQ_CHANNEL_STOPPED_RETRY, "Channel Stopped Retry")
		(MQRQ_CHANNEL_STOPPED_DISABLED, "Channel Stopped Disabled")
		(MQRQ_BRIDGE_STOPPED_OK, "Bridge Stopped OK")
		(MQRQ_BRIDGE_STOPPED_ERROR, "Bridge Stopped Error")
		(MQRQ_SSL_HANDSHAKE_ERROR, "SSL Handshake Error")
		(MQRQ_SSL_CIPHER_SPEC_ERROR, "SSL Cipher Spec Error")
		(MQRQ_SSL_CLIENT_AUTH_ERROR, "SSL Client Auth Error")
		(MQRQ_SSL_PEER_NAME_ERROR, "SSL Peer Name Error")
		(MQRQ_SUB_NOT_AUTHORIZED, "Sub Not Authorized")
		(MQRQ_SUB_DEST_NOT_AUTHORIZED, "Sub Dest Not Authorized")
		(MQRQ_SSL_UNKNOWN_REVOCATION, "SSL Unknown Revocation")
		(MQRQ_SYS_CONN_NOT_AUTHORIZED, "SyS Conn Not Authorized")
		(MQRQ_CHANNEL_BLOCKED_ADDRESS, "Channel Blocked Address")
		(MQRQ_CHANNEL_BLOCKED_USERID, "Channel Blocked Userid")
		(MQRQ_CHANNEL_BLOCKED_NOACCESS, "Channel Blocked NoAccess")
		(MQRQ_MAX_ACTIVE_CHANNELS, "Max Active Channels")
		(MQRQ_MAX_CHANNELS, "Max Channels")
		(MQRQ_SVRCONN_INST_LIMIT, "SvrConn Inst Limit")
		(MQRQ_CLIENT_INST_LIMIT, "Client Inst Limit")
		(MQRQ_CAF_NOT_INSTALLED, "CAF Not Installed")
	)
	(MQCACF_RESTART_LOG_EXTENT_NAME, "RestartRecoveryLogExtent")
	(MQCACF_USER_IDENTIFIER)
	(MQCACH_XMIT_Q_NAME)
;

Dictionary reasonDictionary = Dictionary()
	(MQIACF_REASON_CODE, "Reason", DisplayMapInitializer
		MQCONST2STR(MQRC_NONE                      )
		MQCONST2STR(MQRC_APPL_FIRST                )
		MQCONST2STR(MQRC_APPL_LAST                 )
		MQCONST2STR(MQRC_ALIAS_BASE_Q_TYPE_ERROR   )
		MQCONST2STR(MQRC_ALREADY_CONNECTED         )
		MQCONST2STR(MQRC_BACKED_OUT                )
		MQCONST2STR(MQRC_BUFFER_ERROR              )
		MQCONST2STR(MQRC_BUFFER_LENGTH_ERROR       )
		MQCONST2STR(MQRC_CHAR_ATTR_LENGTH_ERROR    )
		MQCONST2STR(MQRC_CHAR_ATTRS_ERROR          )
		MQCONST2STR(MQRC_CHAR_ATTRS_TOO_SHORT      )
		MQCONST2STR(MQRC_CONNECTION_BROKEN         )
		MQCONST2STR(MQRC_DATA_LENGTH_ERROR         )
		MQCONST2STR(MQRC_DYNAMIC_Q_NAME_ERROR      )
		MQCONST2STR(MQRC_ENVIRONMENT_ERROR         )
		MQCONST2STR(MQRC_EXPIRY_ERROR              )
		MQCONST2STR(MQRC_FEEDBACK_ERROR            )
		MQCONST2STR(MQRC_GET_INHIBITED             )
		MQCONST2STR(MQRC_HANDLE_NOT_AVAILABLE      )
		MQCONST2STR(MQRC_HCONN_ERROR               )
		MQCONST2STR(MQRC_HOBJ_ERROR                )
		MQCONST2STR(MQRC_INHIBIT_VALUE_ERROR       )
		MQCONST2STR(MQRC_INT_ATTR_COUNT_ERROR      )
		MQCONST2STR(MQRC_INT_ATTR_COUNT_TOO_SMALL  )
		MQCONST2STR(MQRC_INT_ATTRS_ARRAY_ERROR     )
		MQCONST2STR(MQRC_SYNCPOINT_LIMIT_REACHED   )
		MQCONST2STR(MQRC_MAX_CONNS_LIMIT_REACHED   )
		MQCONST2STR(MQRC_MD_ERROR                  )
		MQCONST2STR(MQRC_MISSING_REPLY_TO_Q        )
		MQCONST2STR(MQRC_MSG_TYPE_ERROR            )
		MQCONST2STR(MQRC_MSG_TOO_BIG_FOR_Q         )
		MQCONST2STR(MQRC_MSG_TOO_BIG_FOR_Q_MGR     )
		MQCONST2STR(MQRC_NO_MSG_AVAILABLE          )
		MQCONST2STR(MQRC_NO_MSG_UNDER_CURSOR       )
		MQCONST2STR(MQRC_NOT_AUTHORIZED            )
		MQCONST2STR(MQRC_NOT_OPEN_FOR_BROWSE       )
		MQCONST2STR(MQRC_NOT_OPEN_FOR_INPUT        )
		MQCONST2STR(MQRC_NOT_OPEN_FOR_INQUIRE      )
		MQCONST2STR(MQRC_NOT_OPEN_FOR_OUTPUT       )
		MQCONST2STR(MQRC_NOT_OPEN_FOR_SET          )
		MQCONST2STR(MQRC_OBJECT_CHANGED            )
		MQCONST2STR(MQRC_OBJECT_IN_USE             )
		MQCONST2STR(MQRC_OBJECT_TYPE_ERROR         )
		MQCONST2STR(MQRC_OD_ERROR                  )
		MQCONST2STR(MQRC_OPTION_NOT_VALID_FOR_TYPE )
		MQCONST2STR(MQRC_OPTIONS_ERROR             )
		MQCONST2STR(MQRC_PERSISTENCE_ERROR         )
		MQCONST2STR(MQRC_PERSISTENT_NOT_ALLOWED    )
		MQCONST2STR(MQRC_PRIORITY_EXCEEDS_MAXIMUM  )
		MQCONST2STR(MQRC_PRIORITY_ERROR            )
		MQCONST2STR(MQRC_PUT_INHIBITED             )
		MQCONST2STR(MQRC_Q_DELETED                 )
		MQCONST2STR(MQRC_Q_FULL                    )
		MQCONST2STR(MQRC_Q_NOT_EMPTY               )
		MQCONST2STR(MQRC_Q_SPACE_NOT_AVAILABLE     )
		MQCONST2STR(MQRC_Q_TYPE_ERROR              )
		MQCONST2STR(MQRC_Q_MGR_NAME_ERROR          )
		MQCONST2STR(MQRC_Q_MGR_NOT_AVAILABLE       )
		MQCONST2STR(MQRC_REPORT_OPTIONS_ERROR      )
		MQCONST2STR(MQRC_SECOND_MARK_NOT_ALLOWED   )
		MQCONST2STR(MQRC_SECURITY_ERROR            )
		MQCONST2STR(MQRC_SELECTOR_COUNT_ERROR      )
		MQCONST2STR(MQRC_SELECTOR_LIMIT_EXCEEDED   )
		MQCONST2STR(MQRC_SELECTOR_ERROR            )
		MQCONST2STR(MQRC_SELECTOR_NOT_FOR_TYPE     )
		MQCONST2STR(MQRC_SIGNAL_OUTSTANDING        )
		MQCONST2STR(MQRC_SIGNAL_REQUEST_ACCEPTED   )
		MQCONST2STR(MQRC_STORAGE_NOT_AVAILABLE     )
		MQCONST2STR(MQRC_SYNCPOINT_NOT_AVAILABLE   )
		MQCONST2STR(MQRC_TRIGGER_CONTROL_ERROR     )
		MQCONST2STR(MQRC_TRIGGER_DEPTH_ERROR       )
		MQCONST2STR(MQRC_TRIGGER_MSG_PRIORITY_ERR  )
		MQCONST2STR(MQRC_TRIGGER_TYPE_ERROR        )
		MQCONST2STR(MQRC_TRUNCATED_MSG_ACCEPTED    )
		MQCONST2STR(MQRC_TRUNCATED_MSG_FAILED      )
		MQCONST2STR(MQRC_UNKNOWN_ALIAS_BASE_Q      )
		MQCONST2STR(MQRC_UNKNOWN_OBJECT_NAME       )
		MQCONST2STR(MQRC_UNKNOWN_OBJECT_Q_MGR      )
		MQCONST2STR(MQRC_UNKNOWN_REMOTE_Q_MGR      )
		MQCONST2STR(MQRC_WAIT_INTERVAL_ERROR       )
		MQCONST2STR(MQRC_XMIT_Q_TYPE_ERROR         )
		MQCONST2STR(MQRC_XMIT_Q_USAGE_ERROR        )
		MQCONST2STR(MQRC_NOT_OPEN_FOR_PASS_ALL     )
		MQCONST2STR(MQRC_NOT_OPEN_FOR_PASS_IDENT   )
		MQCONST2STR(MQRC_NOT_OPEN_FOR_SET_ALL      )
		MQCONST2STR(MQRC_NOT_OPEN_FOR_SET_IDENT    )
		MQCONST2STR(MQRC_CONTEXT_HANDLE_ERROR      )
		MQCONST2STR(MQRC_CONTEXT_NOT_AVAILABLE     )
		MQCONST2STR(MQRC_SIGNAL1_ERROR             )
		MQCONST2STR(MQRC_OBJECT_ALREADY_EXISTS     )
		MQCONST2STR(MQRC_OBJECT_DAMAGED            )
		MQCONST2STR(MQRC_RESOURCE_PROBLEM          )
		MQCONST2STR(MQRC_ANOTHER_Q_MGR_CONNECTED   )
		MQCONST2STR(MQRC_UNKNOWN_REPORT_OPTION     )
		MQCONST2STR(MQRC_STORAGE_CLASS_ERROR       )
		MQCONST2STR(MQRC_COD_NOT_VALID_FOR_XCF_Q   )
		MQCONST2STR(MQRC_XWAIT_CANCELED            )
		MQCONST2STR(MQRC_XWAIT_ERROR               )
		MQCONST2STR(MQRC_SUPPRESSED_BY_EXIT        )
		MQCONST2STR(MQRC_FORMAT_ERROR              )
		MQCONST2STR(MQRC_SOURCE_CCSID_ERROR        )
		MQCONST2STR(MQRC_SOURCE_INTEGER_ENC_ERROR  )
		MQCONST2STR(MQRC_SOURCE_DECIMAL_ENC_ERROR  )
		MQCONST2STR(MQRC_SOURCE_FLOAT_ENC_ERROR    )
		MQCONST2STR(MQRC_TARGET_CCSID_ERROR        )
		MQCONST2STR(MQRC_TARGET_INTEGER_ENC_ERROR  )
		MQCONST2STR(MQRC_TARGET_DECIMAL_ENC_ERROR  )
		MQCONST2STR(MQRC_TARGET_FLOAT_ENC_ERROR    )
		MQCONST2STR(MQRC_NOT_CONVERTED             )
		MQCONST2STR(MQRC_CONVERTED_MSG_TOO_BIG     )
		MQCONST2STR(MQRC_TRUNCATED                 )
		MQCONST2STR(MQRC_NO_EXTERNAL_PARTICIPANTS  )
		MQCONST2STR(MQRC_PARTICIPANT_NOT_AVAILABLE )
		MQCONST2STR(MQRC_OUTCOME_MIXED             )
		MQCONST2STR(MQRC_OUTCOME_PENDING           )
		MQCONST2STR(MQRC_BRIDGE_STARTED            )
		MQCONST2STR(MQRC_BRIDGE_STOPPED            )
		MQCONST2STR(MQRC_ADAPTER_STORAGE_SHORTAGE  )
		MQCONST2STR(MQRC_UOW_IN_PROGRESS           )
		MQCONST2STR(MQRC_ADAPTER_CONN_LOAD_ERROR   )
		MQCONST2STR(MQRC_ADAPTER_SERV_LOAD_ERROR   )
		MQCONST2STR(MQRC_ADAPTER_DEFS_ERROR        )
		MQCONST2STR(MQRC_ADAPTER_DEFS_LOAD_ERROR   )
		MQCONST2STR(MQRC_ADAPTER_CONV_LOAD_ERROR   )
		MQCONST2STR(MQRC_BO_ERROR                  )
		MQCONST2STR(MQRC_DH_ERROR                  )
		MQCONST2STR(MQRC_MULTIPLE_REASONS          )
		MQCONST2STR(MQRC_OPEN_FAILED               )
		MQCONST2STR(MQRC_ADAPTER_DISC_LOAD_ERROR   )
		MQCONST2STR(MQRC_CNO_ERROR                 )
		MQCONST2STR(MQRC_CICS_WAIT_FAILED          )
		MQCONST2STR(MQRC_DLH_ERROR                 )
		MQCONST2STR(MQRC_HEADER_ERROR              )
		MQCONST2STR(MQRC_SOURCE_LENGTH_ERROR       )
		MQCONST2STR(MQRC_TARGET_LENGTH_ERROR       )
		MQCONST2STR(MQRC_SOURCE_BUFFER_ERROR       )
		MQCONST2STR(MQRC_TARGET_BUFFER_ERROR       )
		MQCONST2STR(MQRC_IIH_ERROR                 )
		MQCONST2STR(MQRC_PCF_ERROR                 )
		MQCONST2STR(MQRC_DBCS_ERROR                )
		MQCONST2STR(MQRC_OBJECT_NAME_ERROR         )
		MQCONST2STR(MQRC_OBJECT_Q_MGR_NAME_ERROR   )
		MQCONST2STR(MQRC_RECS_PRESENT_ERROR        )
		MQCONST2STR(MQRC_OBJECT_RECORDS_ERROR      )
		MQCONST2STR(MQRC_RESPONSE_RECORDS_ERROR    )
		MQCONST2STR(MQRC_ASID_MISMATCH             )
		MQCONST2STR(MQRC_PMO_RECORD_FLAGS_ERROR    )
		MQCONST2STR(MQRC_PUT_MSG_RECORDS_ERROR     )
		MQCONST2STR(MQRC_CONN_ID_IN_USE            )
		MQCONST2STR(MQRC_Q_MGR_QUIESCING           )
		MQCONST2STR(MQRC_Q_MGR_STOPPING            )
		MQCONST2STR(MQRC_DUPLICATE_RECOV_COORD     )
		MQCONST2STR(MQRC_PMO_ERROR                 )
		MQCONST2STR(MQRC_API_EXIT_NOT_FOUND        )
		MQCONST2STR(MQRC_API_EXIT_LOAD_ERROR       )
		MQCONST2STR(MQRC_REMOTE_Q_NAME_ERROR       )
		MQCONST2STR(MQRC_INCONSISTENT_PERSISTENCE  )
		MQCONST2STR(MQRC_GMO_ERROR                 )
		MQCONST2STR(MQRC_CICS_BRIDGE_RESTRICTION   )
		MQCONST2STR(MQRC_STOPPED_BY_CLUSTER_EXIT   )
		MQCONST2STR(MQRC_CLUSTER_RESOLUTION_ERROR  )
		MQCONST2STR(MQRC_CONVERTED_STRING_TOO_BIG  )
		MQCONST2STR(MQRC_TMC_ERROR                 )
		MQCONST2STR(MQRC_PAGESET_FULL              )
		MQCONST2STR(MQRC_STORAGE_MEDIUM_FULL       )
		MQCONST2STR(MQRC_PAGESET_ERROR             )
		MQCONST2STR(MQRC_NAME_NOT_VALID_FOR_TYPE   )
		MQCONST2STR(MQRC_UNEXPECTED_ERROR          )
		MQCONST2STR(MQRC_UNKNOWN_XMIT_Q            )
		MQCONST2STR(MQRC_UNKNOWN_DEF_XMIT_Q        )
		MQCONST2STR(MQRC_DEF_XMIT_Q_TYPE_ERROR     )
		MQCONST2STR(MQRC_DEF_XMIT_Q_USAGE_ERROR    )
		MQCONST2STR(MQRC_MSG_MARKED_BROWSE_CO_OP   )
		MQCONST2STR(MQRC_NAME_IN_USE               )
		MQCONST2STR(MQRC_CONNECTION_QUIESCING      )
		MQCONST2STR(MQRC_CONNECTION_STOPPING       )
		MQCONST2STR(MQRC_ADAPTER_NOT_AVAILABLE     )
		MQCONST2STR(MQRC_MSG_ID_ERROR              )
		MQCONST2STR(MQRC_CORREL_ID_ERROR           )
		MQCONST2STR(MQRC_FILE_SYSTEM_ERROR         )
		MQCONST2STR(MQRC_NO_MSG_LOCKED             )
		MQCONST2STR(MQRC_SOAP_DOTNET_ERROR         )
		MQCONST2STR(MQRC_SOAP_AXIS_ERROR           )
		MQCONST2STR(MQRC_SOAP_URL_ERROR            )
		MQCONST2STR(MQRC_FILE_NOT_AUDITED          )
		MQCONST2STR(MQRC_CONNECTION_NOT_AUTHORIZED )
		MQCONST2STR(MQRC_MSG_TOO_BIG_FOR_CHANNEL   )
		MQCONST2STR(MQRC_CALL_IN_PROGRESS          )
		MQCONST2STR(MQRC_RMH_ERROR                 )
		MQCONST2STR(MQRC_Q_MGR_ACTIVE              )
		MQCONST2STR(MQRC_Q_MGR_NOT_ACTIVE          )
		MQCONST2STR(MQRC_Q_DEPTH_HIGH              )
		MQCONST2STR(MQRC_Q_DEPTH_LOW               )
		MQCONST2STR(MQRC_Q_SERVICE_INTERVAL_HIGH   )
		MQCONST2STR(MQRC_Q_SERVICE_INTERVAL_OK     )
		MQCONST2STR(MQRC_RFH_HEADER_FIELD_ERROR    )
		MQCONST2STR(MQRC_RAS_PROPERTY_ERROR        )
		MQCONST2STR(MQRC_UNIT_OF_WORK_NOT_STARTED  )
		MQCONST2STR(MQRC_CHANNEL_AUTO_DEF_OK       )
		MQCONST2STR(MQRC_CHANNEL_AUTO_DEF_ERROR    )
		MQCONST2STR(MQRC_CFH_ERROR                 )
		MQCONST2STR(MQRC_CFIL_ERROR                )
		MQCONST2STR(MQRC_CFIN_ERROR                )
		MQCONST2STR(MQRC_CFSL_ERROR                )
		MQCONST2STR(MQRC_CFST_ERROR                )
		MQCONST2STR(MQRC_INCOMPLETE_GROUP          )
		MQCONST2STR(MQRC_INCOMPLETE_MSG            )
		MQCONST2STR(MQRC_INCONSISTENT_CCSIDS       )
		MQCONST2STR(MQRC_INCONSISTENT_ENCODINGS    )
		MQCONST2STR(MQRC_INCONSISTENT_UOW          )
		MQCONST2STR(MQRC_INVALID_MSG_UNDER_CURSOR  )
		MQCONST2STR(MQRC_MATCH_OPTIONS_ERROR       )
		MQCONST2STR(MQRC_MDE_ERROR                 )
		MQCONST2STR(MQRC_MSG_FLAGS_ERROR           )
		MQCONST2STR(MQRC_MSG_SEQ_NUMBER_ERROR      )
		MQCONST2STR(MQRC_OFFSET_ERROR              )
		MQCONST2STR(MQRC_ORIGINAL_LENGTH_ERROR     )
		MQCONST2STR(MQRC_SEGMENT_LENGTH_ZERO       )
		MQCONST2STR(MQRC_UOW_NOT_AVAILABLE         )
		MQCONST2STR(MQRC_WRONG_GMO_VERSION         )
		MQCONST2STR(MQRC_WRONG_MD_VERSION          )
		MQCONST2STR(MQRC_GROUP_ID_ERROR            )
		MQCONST2STR(MQRC_INCONSISTENT_BROWSE       )
		MQCONST2STR(MQRC_XQH_ERROR                 )
		MQCONST2STR(MQRC_SRC_ENV_ERROR             )
		MQCONST2STR(MQRC_SRC_NAME_ERROR            )
		MQCONST2STR(MQRC_DEST_ENV_ERROR            )
		MQCONST2STR(MQRC_DEST_NAME_ERROR           )
		MQCONST2STR(MQRC_TM_ERROR                  )
		MQCONST2STR(MQRC_CLUSTER_EXIT_ERROR        )
		MQCONST2STR(MQRC_CLUSTER_EXIT_LOAD_ERROR   )
		MQCONST2STR(MQRC_CLUSTER_PUT_INHIBITED     )
		MQCONST2STR(MQRC_CLUSTER_RESOURCE_ERROR    )
		MQCONST2STR(MQRC_NO_DESTINATIONS_AVAILABLE )
		MQCONST2STR(MQRC_CONN_TAG_IN_USE           )
		MQCONST2STR(MQRC_PARTIALLY_CONVERTED       )
		MQCONST2STR(MQRC_CONNECTION_ERROR          )
		MQCONST2STR(MQRC_OPTION_ENVIRONMENT_ERROR  )
		MQCONST2STR(MQRC_CD_ERROR                  )
		MQCONST2STR(MQRC_CLIENT_CONN_ERROR         )
		MQCONST2STR(MQRC_CHANNEL_STOPPED_BY_USER   )
		MQCONST2STR(MQRC_HCONFIG_ERROR             )
		MQCONST2STR(MQRC_FUNCTION_ERROR            )
		MQCONST2STR(MQRC_CHANNEL_STARTED           )
		MQCONST2STR(MQRC_CHANNEL_STOPPED           )
		MQCONST2STR(MQRC_CHANNEL_CONV_ERROR        )
		MQCONST2STR(MQRC_SERVICE_NOT_AVAILABLE     )
		MQCONST2STR(MQRC_INITIALIZATION_FAILED     )
		MQCONST2STR(MQRC_TERMINATION_FAILED        )
		MQCONST2STR(MQRC_UNKNOWN_Q_NAME            )
		MQCONST2STR(MQRC_SERVICE_ERROR             )
		MQCONST2STR(MQRC_Q_ALREADY_EXISTS          )
		MQCONST2STR(MQRC_USER_ID_NOT_AVAILABLE     )
		MQCONST2STR(MQRC_UNKNOWN_ENTITY            )
		MQCONST2STR(MQRC_UNKNOWN_AUTH_ENTITY       )
		MQCONST2STR(MQRC_UNKNOWN_REF_OBJECT        )
		MQCONST2STR(MQRC_CHANNEL_ACTIVATED         )
		MQCONST2STR(MQRC_CHANNEL_NOT_ACTIVATED     )
		MQCONST2STR(MQRC_UOW_CANCELED              )
		MQCONST2STR(MQRC_FUNCTION_NOT_SUPPORTED    )
		MQCONST2STR(MQRC_SELECTOR_TYPE_ERROR       )
		MQCONST2STR(MQRC_COMMAND_TYPE_ERROR        )
		MQCONST2STR(MQRC_MULTIPLE_INSTANCE_ERROR   )
		MQCONST2STR(MQRC_SYSTEM_ITEM_NOT_ALTERABLE )
		MQCONST2STR(MQRC_BAG_CONVERSION_ERROR      )
		MQCONST2STR(MQRC_SELECTOR_OUT_OF_RANGE     )
		MQCONST2STR(MQRC_SELECTOR_NOT_UNIQUE       )
		MQCONST2STR(MQRC_INDEX_NOT_PRESENT         )
		MQCONST2STR(MQRC_STRING_ERROR              )
		MQCONST2STR(MQRC_ENCODING_NOT_SUPPORTED    )
		MQCONST2STR(MQRC_SELECTOR_NOT_PRESENT      )
		MQCONST2STR(MQRC_OUT_SELECTOR_ERROR        )
		MQCONST2STR(MQRC_STRING_TRUNCATED          )
		MQCONST2STR(MQRC_SELECTOR_WRONG_TYPE       )
		MQCONST2STR(MQRC_INCONSISTENT_ITEM_TYPE    )
		MQCONST2STR(MQRC_INDEX_ERROR               )
		MQCONST2STR(MQRC_SYSTEM_BAG_NOT_ALTERABLE  )
		MQCONST2STR(MQRC_ITEM_COUNT_ERROR          )
		MQCONST2STR(MQRC_FORMAT_NOT_SUPPORTED      )
		MQCONST2STR(MQRC_SELECTOR_NOT_SUPPORTED    )
		MQCONST2STR(MQRC_ITEM_VALUE_ERROR          )
		MQCONST2STR(MQRC_HBAG_ERROR                )
		MQCONST2STR(MQRC_PARAMETER_MISSING         )
		MQCONST2STR(MQRC_CMD_SERVER_NOT_AVAILABLE  )
		MQCONST2STR(MQRC_STRING_LENGTH_ERROR       )
		MQCONST2STR(MQRC_INQUIRY_COMMAND_ERROR     )
		MQCONST2STR(MQRC_NESTED_BAG_NOT_SUPPORTED  )
		MQCONST2STR(MQRC_BAG_WRONG_TYPE            )
		MQCONST2STR(MQRC_ITEM_TYPE_ERROR           )
		MQCONST2STR(MQRC_SYSTEM_BAG_NOT_DELETABLE  )
		MQCONST2STR(MQRC_SYSTEM_ITEM_NOT_DELETABLE )
		MQCONST2STR(MQRC_CODED_CHAR_SET_ID_ERROR   )
		MQCONST2STR(MQRC_MSG_TOKEN_ERROR           )
		MQCONST2STR(MQRC_MISSING_WIH               )
		MQCONST2STR(MQRC_WIH_ERROR                 )
		MQCONST2STR(MQRC_RFH_ERROR                 )
		MQCONST2STR(MQRC_RFH_STRING_ERROR          )
		MQCONST2STR(MQRC_RFH_COMMAND_ERROR         )
		MQCONST2STR(MQRC_RFH_PARM_ERROR            )
		MQCONST2STR(MQRC_RFH_DUPLICATE_PARM        )
		MQCONST2STR(MQRC_RFH_PARM_MISSING          )
		MQCONST2STR(MQRC_CHAR_CONVERSION_ERROR     )
		MQCONST2STR(MQRC_UCS2_CONVERSION_ERROR     )
		MQCONST2STR(MQRC_DB2_NOT_AVAILABLE         )
		MQCONST2STR(MQRC_OBJECT_NOT_UNIQUE         )
		MQCONST2STR(MQRC_CONN_TAG_NOT_RELEASED     )
		MQCONST2STR(MQRC_CF_NOT_AVAILABLE          )
		MQCONST2STR(MQRC_CF_STRUC_IN_USE           )
		MQCONST2STR(MQRC_CF_STRUC_LIST_HDR_IN_USE  )
		MQCONST2STR(MQRC_CF_STRUC_AUTH_FAILED      )
		MQCONST2STR(MQRC_CF_STRUC_ERROR            )
		MQCONST2STR(MQRC_CONN_TAG_NOT_USABLE       )
		MQCONST2STR(MQRC_GLOBAL_UOW_CONFLICT       )
		MQCONST2STR(MQRC_LOCAL_UOW_CONFLICT        )
		MQCONST2STR(MQRC_HANDLE_IN_USE_FOR_UOW     )
		MQCONST2STR(MQRC_UOW_ENLISTMENT_ERROR      )
		MQCONST2STR(MQRC_UOW_MIX_NOT_SUPPORTED     )
		MQCONST2STR(MQRC_WXP_ERROR                 )
		MQCONST2STR(MQRC_CURRENT_RECORD_ERROR      )
		MQCONST2STR(MQRC_NEXT_OFFSET_ERROR         )
		MQCONST2STR(MQRC_NO_RECORD_AVAILABLE       )
		MQCONST2STR(MQRC_OBJECT_LEVEL_INCOMPATIBLE )
		MQCONST2STR(MQRC_NEXT_RECORD_ERROR         )
		MQCONST2STR(MQRC_BACKOUT_THRESHOLD_REACHED )
		MQCONST2STR(MQRC_MSG_NOT_MATCHED           )
		MQCONST2STR(MQRC_JMS_FORMAT_ERROR          )
		MQCONST2STR(MQRC_SEGMENTS_NOT_SUPPORTED    )
		MQCONST2STR(MQRC_WRONG_CF_LEVEL            )
		MQCONST2STR(MQRC_CONFIG_CREATE_OBJECT      )
		MQCONST2STR(MQRC_CONFIG_CHANGE_OBJECT      )
		MQCONST2STR(MQRC_CONFIG_DELETE_OBJECT      )
		MQCONST2STR(MQRC_CONFIG_REFRESH_OBJECT     )
		MQCONST2STR(MQRC_CHANNEL_SSL_ERROR         )
		MQCONST2STR(MQRC_PARTICIPANT_NOT_DEFINED   )
		MQCONST2STR(MQRC_CF_STRUC_FAILED           )
		MQCONST2STR(MQRC_API_EXIT_ERROR            )
		MQCONST2STR(MQRC_API_EXIT_INIT_ERROR       )
		MQCONST2STR(MQRC_API_EXIT_TERM_ERROR       )
		MQCONST2STR(MQRC_EXIT_REASON_ERROR         )
		MQCONST2STR(MQRC_RESERVED_VALUE_ERROR      )
		MQCONST2STR(MQRC_NO_DATA_AVAILABLE         )
		MQCONST2STR(MQRC_SCO_ERROR                 )
		MQCONST2STR(MQRC_KEY_REPOSITORY_ERROR      )
		MQCONST2STR(MQRC_CRYPTO_HARDWARE_ERROR     )
		MQCONST2STR(MQRC_AUTH_INFO_REC_COUNT_ERROR )
		MQCONST2STR(MQRC_AUTH_INFO_REC_ERROR       )
		MQCONST2STR(MQRC_AIR_ERROR                 )
		MQCONST2STR(MQRC_AUTH_INFO_TYPE_ERROR      )
		MQCONST2STR(MQRC_AUTH_INFO_CONN_NAME_ERROR )
		MQCONST2STR(MQRC_LDAP_USER_NAME_ERROR      )
		MQCONST2STR(MQRC_LDAP_USER_NAME_LENGTH_ERR )
		MQCONST2STR(MQRC_LDAP_PASSWORD_ERROR       )
		MQCONST2STR(MQRC_SSL_ALREADY_INITIALIZED   )
		MQCONST2STR(MQRC_SSL_CONFIG_ERROR          )
		MQCONST2STR(MQRC_SSL_INITIALIZATION_ERROR  )
		MQCONST2STR(MQRC_Q_INDEX_TYPE_ERROR        )
		MQCONST2STR(MQRC_CFBS_ERROR                )
		MQCONST2STR(MQRC_SSL_NOT_ALLOWED           )
		MQCONST2STR(MQRC_JSSE_ERROR                )
		MQCONST2STR(MQRC_SSL_PEER_NAME_MISMATCH    )
		MQCONST2STR(MQRC_SSL_PEER_NAME_ERROR       )
		MQCONST2STR(MQRC_UNSUPPORTED_CIPHER_SUITE  )
		MQCONST2STR(MQRC_SSL_CERTIFICATE_REVOKED   )
		MQCONST2STR(MQRC_SSL_CERT_STORE_ERROR      )
		MQCONST2STR(MQRC_CLIENT_EXIT_LOAD_ERROR    )
		MQCONST2STR(MQRC_CLIENT_EXIT_ERROR         )
		MQCONST2STR(MQRC_UOW_COMMITTED             )
		MQCONST2STR(MQRC_SSL_KEY_RESET_ERROR       )
		MQCONST2STR(MQRC_UNKNOWN_COMPONENT_NAME    )
		MQCONST2STR(MQRC_LOGGER_STATUS             )
		MQCONST2STR(MQRC_COMMAND_MQSC              )
		MQCONST2STR(MQRC_COMMAND_PCF               )
		MQCONST2STR(MQRC_CFIF_ERROR                )
		MQCONST2STR(MQRC_CFSF_ERROR                )
		MQCONST2STR(MQRC_CFGR_ERROR                )
		MQCONST2STR(MQRC_MSG_NOT_ALLOWED_IN_GROUP  )
		MQCONST2STR(MQRC_FILTER_OPERATOR_ERROR     )
		MQCONST2STR(MQRC_NESTED_SELECTOR_ERROR     )
		MQCONST2STR(MQRC_EPH_ERROR                 )
		MQCONST2STR(MQRC_RFH_FORMAT_ERROR          )
		MQCONST2STR(MQRC_CFBF_ERROR                )
		MQCONST2STR(MQRC_CLIENT_CHANNEL_CONFLICT   )
		MQCONST2STR(MQRC_SD_ERROR                  )
		MQCONST2STR(MQRC_TOPIC_STRING_ERROR        )
		MQCONST2STR(MQRC_STS_ERROR                 )
		MQCONST2STR(MQRC_NO_SUBSCRIPTION           )
		MQCONST2STR(MQRC_SUBSCRIPTION_IN_USE       )
		MQCONST2STR(MQRC_STAT_TYPE_ERROR           )
		MQCONST2STR(MQRC_SUB_USER_DATA_ERROR       )
		MQCONST2STR(MQRC_SUB_ALREADY_EXISTS        )
		MQCONST2STR(MQRC_IDENTITY_MISMATCH         )
		MQCONST2STR(MQRC_ALTER_SUB_ERROR           )
		MQCONST2STR(MQRC_DURABILITY_NOT_ALLOWED    )
		MQCONST2STR(MQRC_NO_RETAINED_MSG           )
		MQCONST2STR(MQRC_SRO_ERROR                 )
		MQCONST2STR(MQRC_SUB_NAME_ERROR            )
		MQCONST2STR(MQRC_OBJECT_STRING_ERROR       )
		MQCONST2STR(MQRC_PROPERTY_NAME_ERROR       )
		MQCONST2STR(MQRC_SEGMENTATION_NOT_ALLOWED  )
		MQCONST2STR(MQRC_CBD_ERROR                 )
		MQCONST2STR(MQRC_CTLO_ERROR                )
		MQCONST2STR(MQRC_NO_CALLBACKS_ACTIVE       )
		MQCONST2STR(MQRC_CALLBACK_NOT_REGISTERED   )
		MQCONST2STR(MQRC_OPTIONS_CHANGED           )
		MQCONST2STR(MQRC_READ_AHEAD_MSGS           )
		MQCONST2STR(MQRC_SELECTOR_SYNTAX_ERROR     )
		MQCONST2STR(MQRC_HMSG_ERROR                )
		MQCONST2STR(MQRC_CMHO_ERROR                )
		MQCONST2STR(MQRC_DMHO_ERROR                )
		MQCONST2STR(MQRC_SMPO_ERROR                )
		MQCONST2STR(MQRC_IMPO_ERROR                )
		MQCONST2STR(MQRC_PROPERTY_NAME_TOO_BIG     )
		MQCONST2STR(MQRC_PROP_VALUE_NOT_CONVERTED  )
		MQCONST2STR(MQRC_PROP_TYPE_NOT_SUPPORTED   )
		MQCONST2STR(MQRC_PROPERTY_VALUE_TOO_BIG    )
		MQCONST2STR(MQRC_PROP_CONV_NOT_SUPPORTED   )
		MQCONST2STR(MQRC_PROPERTY_NOT_AVAILABLE    )
		MQCONST2STR(MQRC_PROP_NUMBER_FORMAT_ERROR  )
		MQCONST2STR(MQRC_PROPERTY_TYPE_ERROR       )
		MQCONST2STR(MQRC_PROPERTIES_TOO_BIG        )
		MQCONST2STR(MQRC_PUT_NOT_RETAINED          )
		MQCONST2STR(MQRC_ALIAS_TARGTYPE_CHANGED    )
		MQCONST2STR(MQRC_DMPO_ERROR                )
		MQCONST2STR(MQRC_PD_ERROR                  )
		MQCONST2STR(MQRC_CALLBACK_TYPE_ERROR       )
		MQCONST2STR(MQRC_CBD_OPTIONS_ERROR         )
		MQCONST2STR(MQRC_MAX_MSG_LENGTH_ERROR      )
		MQCONST2STR(MQRC_CALLBACK_ROUTINE_ERROR    )
		MQCONST2STR(MQRC_CALLBACK_LINK_ERROR       )
		MQCONST2STR(MQRC_OPERATION_ERROR           )
		MQCONST2STR(MQRC_BMHO_ERROR                )
		MQCONST2STR(MQRC_UNSUPPORTED_PROPERTY      )
		MQCONST2STR(MQRC_PROP_NAME_NOT_CONVERTED   )
		MQCONST2STR(MQRC_GET_ENABLED               )
		MQCONST2STR(MQRC_MODULE_NOT_FOUND          )
		MQCONST2STR(MQRC_MODULE_INVALID            )
		MQCONST2STR(MQRC_MODULE_ENTRY_NOT_FOUND    )
		MQCONST2STR(MQRC_MIXED_CONTENT_NOT_ALLOWED )
		MQCONST2STR(MQRC_MSG_HANDLE_IN_USE         )
		MQCONST2STR(MQRC_HCONN_ASYNC_ACTIVE        )
		MQCONST2STR(MQRC_MHBO_ERROR                )
		MQCONST2STR(MQRC_PUBLICATION_FAILURE       )
		MQCONST2STR(MQRC_SUB_INHIBITED             )
		MQCONST2STR(MQRC_SELECTOR_ALWAYS_FALSE     )
		MQCONST2STR(MQRC_XEPO_ERROR                )
		MQCONST2STR(MQRC_DURABILITY_NOT_ALTERABLE  )
		MQCONST2STR(MQRC_TOPIC_NOT_ALTERABLE       )
		MQCONST2STR(MQRC_SUBLEVEL_NOT_ALTERABLE    )
		MQCONST2STR(MQRC_PROPERTY_NAME_LENGTH_ERR  )
		MQCONST2STR(MQRC_DUPLICATE_GROUP_SUB       )
		MQCONST2STR(MQRC_GROUPING_NOT_ALTERABLE    )
		MQCONST2STR(MQRC_SELECTOR_INVALID_FOR_TYPE )
		MQCONST2STR(MQRC_HOBJ_QUIESCED             )
		MQCONST2STR(MQRC_HOBJ_QUIESCED_NO_MSGS     )
		MQCONST2STR(MQRC_SELECTION_STRING_ERROR    )
		MQCONST2STR(MQRC_RES_OBJECT_STRING_ERROR   )
		MQCONST2STR(MQRC_CONNECTION_SUSPENDED      )
		MQCONST2STR(MQRC_INVALID_DESTINATION       )
		MQCONST2STR(MQRC_INVALID_SUBSCRIPTION      )
		MQCONST2STR(MQRC_SELECTOR_NOT_ALTERABLE    )
		MQCONST2STR(MQRC_RETAINED_MSG_Q_ERROR      )
		MQCONST2STR(MQRC_RETAINED_NOT_DELIVERED    )
		MQCONST2STR(MQRC_RFH_RESTRICTED_FORMAT_ERR )
		MQCONST2STR(MQRC_CONNECTION_STOPPED        )
		MQCONST2STR(MQRC_ASYNC_UOW_CONFLICT        )
		MQCONST2STR(MQRC_ASYNC_XA_CONFLICT         )
		MQCONST2STR(MQRC_PUBSUB_INHIBITED          )
		MQCONST2STR(MQRC_MSG_HANDLE_COPY_FAILURE   )
		MQCONST2STR(MQRC_DEST_CLASS_NOT_ALTERABLE  )
		MQCONST2STR(MQRC_OPERATION_NOT_ALLOWED     )
		MQCONST2STR(MQRC_ACTION_ERROR              )
		MQCONST2STR(MQRC_CHANNEL_NOT_AVAILABLE     )
		MQCONST2STR(MQRC_HOST_NOT_AVAILABLE        )
		MQCONST2STR(MQRC_CHANNEL_CONFIG_ERROR      )
		MQCONST2STR(MQRC_UNKNOWN_CHANNEL_NAME      )
		MQCONST2STR(MQRC_LOOPING_PUBLICATION       )
		MQCONST2STR(MQRC_ALREADY_JOINED            )
		MQCONST2STR(MQRC_STANDBY_Q_MGR             )
		MQCONST2STR(MQRC_RECONNECTING              )
		MQCONST2STR(MQRC_RECONNECTED               )
		MQCONST2STR(MQRC_RECONNECT_QMID_MISMATCH   )
		MQCONST2STR(MQRC_RECONNECT_INCOMPATIBLE    )
		MQCONST2STR(MQRC_RECONNECT_FAILED          )
		MQCONST2STR(MQRC_CALL_INTERRUPTED          )
		MQCONST2STR(MQRC_NO_SUBS_MATCHED           )
		MQCONST2STR(MQRC_SELECTION_NOT_AVAILABLE   )
		MQCONST2STR(MQRC_CHANNEL_SSL_WARNING       )
		MQCONST2STR(MQRC_OCSP_URL_ERROR            )
		MQCONST2STR(MQRC_CONTENT_ERROR             )
		MQCONST2STR(MQRC_RECONNECT_Q_MGR_REQD      )
		MQCONST2STR(MQRC_RECONNECT_TIMED_OUT       )
		MQCONST2STR(MQRC_PUBLISH_EXIT_ERROR        )
		MQCONST2STR(MQRC_SSL_ALT_PROVIDER_REQUIRED )
		MQCONST2STR(MQRC_PRECONN_EXIT_LOAD_ERROR   )
		MQCONST2STR(MQRC_PRECONN_EXIT_NOT_FOUND    )
		MQCONST2STR(MQRC_PRECONN_EXIT_ERROR        )
		MQCONST2STR(MQRC_CD_ARRAY_ERROR            )

		// PCF Reason Codes
		MQCONST2STR(MQRCCF_CFH_TYPE_ERROR          )
		MQCONST2STR(MQRCCF_CFH_LENGTH_ERROR        )
		MQCONST2STR(MQRCCF_CFH_VERSION_ERROR       )
		MQCONST2STR(MQRCCF_CFH_MSG_SEQ_NUMBER_ERR  )
		MQCONST2STR(MQRCCF_CFH_CONTROL_ERROR       )
		MQCONST2STR(MQRCCF_CFH_PARM_COUNT_ERROR    )
		MQCONST2STR(MQRCCF_CFH_COMMAND_ERROR       )
		MQCONST2STR(MQRCCF_COMMAND_FAILED          )
		MQCONST2STR(MQRCCF_CFIN_LENGTH_ERROR       )
		MQCONST2STR(MQRCCF_CFST_LENGTH_ERROR       )
		MQCONST2STR(MQRCCF_CFST_STRING_LENGTH_ERR  )
		MQCONST2STR(MQRCCF_FORCE_VALUE_ERROR       )
		MQCONST2STR(MQRCCF_STRUCTURE_TYPE_ERROR    )
		MQCONST2STR(MQRCCF_CFIN_PARM_ID_ERROR      )
		MQCONST2STR(MQRCCF_CFST_PARM_ID_ERROR      )
		MQCONST2STR(MQRCCF_MSG_LENGTH_ERROR        )
		MQCONST2STR(MQRCCF_CFIN_DUPLICATE_PARM     )
		MQCONST2STR(MQRCCF_CFST_DUPLICATE_PARM     )
		MQCONST2STR(MQRCCF_PARM_COUNT_TOO_SMALL    )
		MQCONST2STR(MQRCCF_PARM_COUNT_TOO_BIG      )
		MQCONST2STR(MQRCCF_Q_ALREADY_IN_CELL       )
		MQCONST2STR(MQRCCF_Q_TYPE_ERROR            )
		MQCONST2STR(MQRCCF_MD_FORMAT_ERROR         )
		MQCONST2STR(MQRCCF_CFSL_LENGTH_ERROR       )
		MQCONST2STR(MQRCCF_REPLACE_VALUE_ERROR     )
		MQCONST2STR(MQRCCF_CFIL_DUPLICATE_VALUE    )
		MQCONST2STR(MQRCCF_CFIL_COUNT_ERROR        )
		MQCONST2STR(MQRCCF_CFIL_LENGTH_ERROR       )
		MQCONST2STR(MQRCCF_QUIESCE_VALUE_ERROR     )
		MQCONST2STR(MQRCCF_MODE_VALUE_ERROR        )
		MQCONST2STR(MQRCCF_MSG_SEQ_NUMBER_ERROR    )
		MQCONST2STR(MQRCCF_PING_DATA_COUNT_ERROR   )
		MQCONST2STR(MQRCCF_PING_DATA_COMPARE_ERROR )
		MQCONST2STR(MQRCCF_CFSL_PARM_ID_ERROR      )
		MQCONST2STR(MQRCCF_CHANNEL_TYPE_ERROR      )
		MQCONST2STR(MQRCCF_PARM_SEQUENCE_ERROR     )
		MQCONST2STR(MQRCCF_XMIT_PROTOCOL_TYPE_ERR  )
		MQCONST2STR(MQRCCF_BATCH_SIZE_ERROR        )
		MQCONST2STR(MQRCCF_DISC_INT_ERROR          )
		MQCONST2STR(MQRCCF_SHORT_RETRY_ERROR       )
		MQCONST2STR(MQRCCF_SHORT_TIMER_ERROR       )
		MQCONST2STR(MQRCCF_LONG_RETRY_ERROR        )
		MQCONST2STR(MQRCCF_LONG_TIMER_ERROR        )
		MQCONST2STR(MQRCCF_SEQ_NUMBER_WRAP_ERROR   )
		MQCONST2STR(MQRCCF_MAX_MSG_LENGTH_ERROR    )
		MQCONST2STR(MQRCCF_PUT_AUTH_ERROR          )
		MQCONST2STR(MQRCCF_PURGE_VALUE_ERROR       )
		MQCONST2STR(MQRCCF_CFIL_PARM_ID_ERROR      )
		MQCONST2STR(MQRCCF_MSG_TRUNCATED           )
		MQCONST2STR(MQRCCF_CCSID_ERROR             )
		MQCONST2STR(MQRCCF_ENCODING_ERROR          )
		MQCONST2STR(MQRCCF_QUEUES_VALUE_ERROR      )
		MQCONST2STR(MQRCCF_DATA_CONV_VALUE_ERROR   )
		MQCONST2STR(MQRCCF_INDOUBT_VALUE_ERROR     )
		MQCONST2STR(MQRCCF_ESCAPE_TYPE_ERROR       )
		MQCONST2STR(MQRCCF_REPOS_VALUE_ERROR       )
		MQCONST2STR(MQRCCF_CHANNEL_TABLE_ERROR     )
		MQCONST2STR(MQRCCF_MCA_TYPE_ERROR          )
		MQCONST2STR(MQRCCF_CHL_INST_TYPE_ERROR     )
		MQCONST2STR(MQRCCF_CHL_STATUS_NOT_FOUND    )
		MQCONST2STR(MQRCCF_CFSL_DUPLICATE_PARM     )
		MQCONST2STR(MQRCCF_CFSL_TOTAL_LENGTH_ERROR )
		MQCONST2STR(MQRCCF_CFSL_COUNT_ERROR        )
		MQCONST2STR(MQRCCF_CFSL_STRING_LENGTH_ERR  )
		MQCONST2STR(MQRCCF_BROKER_DELETED          )
		MQCONST2STR(MQRCCF_STREAM_ERROR            )
		MQCONST2STR(MQRCCF_TOPIC_ERROR             )
		MQCONST2STR(MQRCCF_NOT_REGISTERED          )
		MQCONST2STR(MQRCCF_Q_MGR_NAME_ERROR        )
		MQCONST2STR(MQRCCF_INCORRECT_STREAM        )
		MQCONST2STR(MQRCCF_Q_NAME_ERROR            )
		MQCONST2STR(MQRCCF_NO_RETAINED_MSG         )
		MQCONST2STR(MQRCCF_DUPLICATE_IDENTITY      )
		MQCONST2STR(MQRCCF_INCORRECT_Q             )
		MQCONST2STR(MQRCCF_CORREL_ID_ERROR         )
		MQCONST2STR(MQRCCF_NOT_AUTHORIZED          )
		MQCONST2STR(MQRCCF_UNKNOWN_STREAM          )
		MQCONST2STR(MQRCCF_REG_OPTIONS_ERROR       )
		MQCONST2STR(MQRCCF_PUB_OPTIONS_ERROR       )
		MQCONST2STR(MQRCCF_UNKNOWN_BROKER          )
		MQCONST2STR(MQRCCF_Q_MGR_CCSID_ERROR       )
		MQCONST2STR(MQRCCF_DEL_OPTIONS_ERROR       )
		MQCONST2STR(MQRCCF_CLUSTER_NAME_CONFLICT   )
		MQCONST2STR(MQRCCF_REPOS_NAME_CONFLICT     )
		MQCONST2STR(MQRCCF_CLUSTER_Q_USAGE_ERROR   )
		MQCONST2STR(MQRCCF_ACTION_VALUE_ERROR      )
		MQCONST2STR(MQRCCF_COMMS_LIBRARY_ERROR     )
		MQCONST2STR(MQRCCF_NETBIOS_NAME_ERROR      )
		MQCONST2STR(MQRCCF_BROKER_COMMAND_FAILED   )
		MQCONST2STR(MQRCCF_CFST_CONFLICTING_PARM   )
		MQCONST2STR(MQRCCF_PATH_NOT_VALID          )
		MQCONST2STR(MQRCCF_PARM_SYNTAX_ERROR       )
		MQCONST2STR(MQRCCF_PWD_LENGTH_ERROR        )
		MQCONST2STR(MQRCCF_FILTER_ERROR            )
		MQCONST2STR(MQRCCF_WRONG_USER              )
		MQCONST2STR(MQRCCF_DUPLICATE_SUBSCRIPTION  )
		MQCONST2STR(MQRCCF_SUB_NAME_ERROR          )
		MQCONST2STR(MQRCCF_SUB_IDENTITY_ERROR      )
		MQCONST2STR(MQRCCF_SUBSCRIPTION_IN_USE     )
		MQCONST2STR(MQRCCF_SUBSCRIPTION_LOCKED     )
		MQCONST2STR(MQRCCF_ALREADY_JOINED          )
		MQCONST2STR(MQRCCF_OBJECT_IN_USE           )
		MQCONST2STR(MQRCCF_UNKNOWN_FILE_NAME       )
		MQCONST2STR(MQRCCF_FILE_NOT_AVAILABLE      )
		MQCONST2STR(MQRCCF_DISC_RETRY_ERROR        )
		MQCONST2STR(MQRCCF_ALLOC_RETRY_ERROR       )
		MQCONST2STR(MQRCCF_ALLOC_SLOW_TIMER_ERROR  )
		MQCONST2STR(MQRCCF_ALLOC_FAST_TIMER_ERROR  )
		MQCONST2STR(MQRCCF_PORT_NUMBER_ERROR       )
		MQCONST2STR(MQRCCF_CHL_SYSTEM_NOT_ACTIVE   )
		MQCONST2STR(MQRCCF_ENTITY_NAME_MISSING     )
		MQCONST2STR(MQRCCF_PROFILE_NAME_ERROR      )
		MQCONST2STR(MQRCCF_AUTH_VALUE_ERROR        )
		MQCONST2STR(MQRCCF_AUTH_VALUE_MISSING      )
		MQCONST2STR(MQRCCF_OBJECT_TYPE_MISSING     )
		MQCONST2STR(MQRCCF_CONNECTION_ID_ERROR     )
		MQCONST2STR(MQRCCF_LOG_TYPE_ERROR          )
		MQCONST2STR(MQRCCF_PROGRAM_NOT_AVAILABLE   )
		MQCONST2STR(MQRCCF_PROGRAM_AUTH_FAILED     )
		MQCONST2STR(MQRCCF_NONE_FOUND              )
		MQCONST2STR(MQRCCF_SECURITY_SWITCH_OFF     )
		MQCONST2STR(MQRCCF_SECURITY_REFRESH_FAILED )
		MQCONST2STR(MQRCCF_PARM_CONFLICT           )
		MQCONST2STR(MQRCCF_COMMAND_INHIBITED       )
		MQCONST2STR(MQRCCF_OBJECT_BEING_DELETED    )
		MQCONST2STR(MQRCCF_STORAGE_CLASS_IN_USE    )
		MQCONST2STR(MQRCCF_OBJECT_NAME_RESTRICTED  )
		MQCONST2STR(MQRCCF_OBJECT_LIMIT_EXCEEDED   )
		MQCONST2STR(MQRCCF_OBJECT_OPEN_FORCE       )
		MQCONST2STR(MQRCCF_DISPOSITION_CONFLICT    )
		MQCONST2STR(MQRCCF_Q_MGR_NOT_IN_QSG        )
		MQCONST2STR(MQRCCF_ATTR_VALUE_FIXED        )
		MQCONST2STR(MQRCCF_NAMELIST_ERROR          )
		MQCONST2STR(MQRCCF_NO_CHANNEL_INITIATOR    )
		MQCONST2STR(MQRCCF_CHANNEL_INITIATOR_ERROR )
		MQCONST2STR(MQRCCF_COMMAND_LEVEL_CONFLICT  )
		MQCONST2STR(MQRCCF_Q_ATTR_CONFLICT         )
		MQCONST2STR(MQRCCF_EVENTS_DISABLED         )
		MQCONST2STR(MQRCCF_COMMAND_SCOPE_ERROR     )
		MQCONST2STR(MQRCCF_COMMAND_REPLY_ERROR     )
		MQCONST2STR(MQRCCF_FUNCTION_RESTRICTED     )
		MQCONST2STR(MQRCCF_PARM_MISSING            )
		MQCONST2STR(MQRCCF_PARM_VALUE_ERROR        )
		MQCONST2STR(MQRCCF_COMMAND_LENGTH_ERROR    )
		MQCONST2STR(MQRCCF_COMMAND_ORIGIN_ERROR    )
		MQCONST2STR(MQRCCF_LISTENER_CONFLICT       )
		MQCONST2STR(MQRCCF_LISTENER_STARTED        )
		MQCONST2STR(MQRCCF_LISTENER_STOPPED        )
		MQCONST2STR(MQRCCF_CHANNEL_ERROR           )
		MQCONST2STR(MQRCCF_CF_STRUC_ERROR          )
		MQCONST2STR(MQRCCF_UNKNOWN_USER_ID         )
		MQCONST2STR(MQRCCF_UNEXPECTED_ERROR        )
		MQCONST2STR(MQRCCF_NO_XCF_PARTNER          )
		MQCONST2STR(MQRCCF_CFGR_PARM_ID_ERROR      )
		MQCONST2STR(MQRCCF_CFIF_LENGTH_ERROR       )
		MQCONST2STR(MQRCCF_CFIF_OPERATOR_ERROR     )
		MQCONST2STR(MQRCCF_CFIF_PARM_ID_ERROR      )
		MQCONST2STR(MQRCCF_CFSF_FILTER_VAL_LEN_ERR )
		MQCONST2STR(MQRCCF_CFSF_LENGTH_ERROR       )
		MQCONST2STR(MQRCCF_CFSF_OPERATOR_ERROR     )
		MQCONST2STR(MQRCCF_CFSF_PARM_ID_ERROR      )
		MQCONST2STR(MQRCCF_TOO_MANY_FILTERS        )
		MQCONST2STR(MQRCCF_LISTENER_RUNNING        )
		MQCONST2STR(MQRCCF_LSTR_STATUS_NOT_FOUND   )
		MQCONST2STR(MQRCCF_SERVICE_RUNNING         )
		MQCONST2STR(MQRCCF_SERV_STATUS_NOT_FOUND   )
		MQCONST2STR(MQRCCF_SERVICE_STOPPED         )
		MQCONST2STR(MQRCCF_CFBS_DUPLICATE_PARM     )
		MQCONST2STR(MQRCCF_CFBS_LENGTH_ERROR       )
		MQCONST2STR(MQRCCF_CFBS_PARM_ID_ERROR      )
		MQCONST2STR(MQRCCF_CFBS_STRING_LENGTH_ERR  )
		MQCONST2STR(MQRCCF_CFGR_LENGTH_ERROR       )
		MQCONST2STR(MQRCCF_CFGR_PARM_COUNT_ERROR   )
		MQCONST2STR(MQRCCF_CONN_NOT_STOPPED        )
		MQCONST2STR(MQRCCF_SERVICE_REQUEST_PENDING )
		MQCONST2STR(MQRCCF_NO_START_CMD            )
		MQCONST2STR(MQRCCF_NO_STOP_CMD             )
		MQCONST2STR(MQRCCF_CFBF_LENGTH_ERROR       )
		MQCONST2STR(MQRCCF_CFBF_PARM_ID_ERROR      )
		MQCONST2STR(MQRCCF_CFBF_OPERATOR_ERROR     )
		MQCONST2STR(MQRCCF_CFBF_FILTER_VAL_LEN_ERR )
		MQCONST2STR(MQRCCF_LISTENER_STILL_ACTIVE   )
		MQCONST2STR(MQRCCF_DEF_XMIT_Q_CLUS_ERROR   )
		MQCONST2STR(MQRCCF_TOPICSTR_ALREADY_EXISTS )
		MQCONST2STR(MQRCCF_SHARING_CONVS_ERROR     )
		MQCONST2STR(MQRCCF_SHARING_CONVS_TYPE      )
		MQCONST2STR(MQRCCF_SECURITY_CASE_CONFLICT  )
		MQCONST2STR(MQRCCF_TOPIC_TYPE_ERROR        )
		MQCONST2STR(MQRCCF_MAX_INSTANCES_ERROR     )
		MQCONST2STR(MQRCCF_MAX_INSTS_PER_CLNT_ERR  )
		MQCONST2STR(MQRCCF_TOPIC_STRING_NOT_FOUND  )
		MQCONST2STR(MQRCCF_SUBSCRIPTION_POINT_ERR  )
		MQCONST2STR(MQRCCF_SUB_ALREADY_EXISTS      )
		MQCONST2STR(MQRCCF_UNKNOWN_OBJECT_NAME     )
		MQCONST2STR(MQRCCF_REMOTE_Q_NAME_ERROR     )
		MQCONST2STR(MQRCCF_DURABILITY_NOT_ALLOWED  )
		MQCONST2STR(MQRCCF_HOBJ_ERROR              )
		MQCONST2STR(MQRCCF_DEST_NAME_ERROR         )
		MQCONST2STR(MQRCCF_INVALID_DESTINATION     )
		MQCONST2STR(MQRCCF_PUBSUB_INHIBITED        )
		MQCONST2STR(MQRCCF_GROUPUR_CHECKS_FAILED   )
		MQCONST2STR(MQRCCF_COMM_INFO_TYPE_ERROR    )
		MQCONST2STR(MQRCCF_USE_CLIENT_ID_ERROR     )
		MQCONST2STR(MQRCCF_CLIENT_ID_NOT_FOUND     )
		MQCONST2STR(MQRCCF_CLIENT_ID_ERROR         )
		MQCONST2STR(MQRCCF_PORT_IN_USE             )
		MQCONST2STR(MQRCCF_SSL_ALT_PROVIDER_REQD   )
		MQCONST2STR(MQRCCF_CHLAUTH_TYPE_ERROR      )
		MQCONST2STR(MQRCCF_CHLAUTH_ACTION_ERROR    )
		MQCONST2STR(MQRCCF_POLICY_NOT_FOUND        )
		MQCONST2STR(MQRCCF_ENCRYPTION_ALG_ERROR    )
		MQCONST2STR(MQRCCF_SIGNATURE_ALG_ERROR     )
		MQCONST2STR(MQRCCF_TOLERATION_POL_ERROR    )
		MQCONST2STR(MQRCCF_POLICY_VERSION_ERROR    )
		MQCONST2STR(MQRCCF_RECIPIENT_DN_MISSING    )
		MQCONST2STR(MQRCCF_POLICY_NAME_MISSING     )
		MQCONST2STR(MQRCCF_CHLAUTH_USERSRC_ERROR   )
		MQCONST2STR(MQRCCF_WRONG_CHLAUTH_TYPE      )
		MQCONST2STR(MQRCCF_CHLAUTH_ALREADY_EXISTS  )
		MQCONST2STR(MQRCCF_CHLAUTH_NOT_FOUND       )
		MQCONST2STR(MQRCCF_WRONG_CHLAUTH_ACTION    )
		MQCONST2STR(MQRCCF_WRONG_CHLAUTH_USERSRC   )
		MQCONST2STR(MQRCCF_CHLAUTH_WARN_ERROR      )
		MQCONST2STR(MQRCCF_WRONG_CHLAUTH_MATCH     )
		MQCONST2STR(MQRCCF_IPADDR_RANGE_CONFLICT   )
		MQCONST2STR(MQRCCF_CHLAUTH_MAX_EXCEEDED    )
		MQCONST2STR(MQRCCF_IPADDR_ERROR            )
		MQCONST2STR(MQRCCF_IPADDR_RANGE_ERROR      )
		MQCONST2STR(MQRCCF_PROFILE_NAME_MISSING    )
		MQCONST2STR(MQRCCF_CHLAUTH_CLNTUSER_ERROR  )
		MQCONST2STR(MQRCCF_CHLAUTH_NAME_ERROR      )
		MQCONST2STR(MQRCCF_CHLAUTH_RUNCHECK_ERROR  )
		MQCONST2STR(MQRCCF_CF_STRUC_ALREADY_FAILED )
		MQCONST2STR(MQRCCF_CFCONLOS_CHECKS_FAILED  )
		MQCONST2STR(MQRCCF_SUITE_B_ERROR           )
		MQCONST2STR(MQRCCF_CHANNEL_NOT_STARTED     )
		MQCONST2STR(MQRCCF_CUSTOM_ERROR            )
		MQCONST2STR(MQRCCF_BACKLOG_OUT_OF_RANGE    )
		MQCONST2STR(MQRCCF_CHLAUTH_DISABLED        )
		MQCONST2STR(MQRCCF_SMDS_REQUIRES_DSGROUP   )
		MQCONST2STR(MQRCCF_PSCLUS_DISABLED_TOPDEF  )
		MQCONST2STR(MQRCCF_PSCLUS_TOPIC_EXISTS     )
		MQCONST2STR(MQRCCF_SSL_CIPHER_SUITE_ERROR  )
		MQCONST2STR(MQRCCF_SOCKET_ERROR            )
#ifdef MQRCCF_CLUS_XMIT_Q_USAGE_ERROR
		MQCONST2STR(MQRCCF_CLUS_XMIT_Q_USAGE_ERROR )
#endif
#ifdef MQRCCF_CERT_VAL_POLICY_ERROR
		MQCONST2STR(MQRCCF_CERT_VAL_POLICY_ERROR   )
#endif

		// C++ Reason codes
		MQCONST2STR(MQRC_REOPEN_EXCL_INPUT_ERROR   )
		MQCONST2STR(MQRC_REOPEN_INQUIRE_ERROR      )
		MQCONST2STR(MQRC_REOPEN_SAVED_CONTEXT_ERR  )
		MQCONST2STR(MQRC_REOPEN_TEMPORARY_Q_ERROR  )
		MQCONST2STR(MQRC_ATTRIBUTE_LOCKED          )
		MQCONST2STR(MQRC_CURSOR_NOT_VALID          )
		MQCONST2STR(MQRC_ENCODING_ERROR            )
		MQCONST2STR(MQRC_STRUC_ID_ERROR            )
		MQCONST2STR(MQRC_NULL_POINTER              )
		MQCONST2STR(MQRC_NO_CONNECTION_REFERENCE   )
		MQCONST2STR(MQRC_NO_BUFFER                 )
		MQCONST2STR(MQRC_BINARY_DATA_LENGTH_ERROR  )
		MQCONST2STR(MQRC_BUFFER_NOT_AUTOMATIC      )
		MQCONST2STR(MQRC_INSUFFICIENT_BUFFER       )
		MQCONST2STR(MQRC_INSUFFICIENT_DATA         )
		MQCONST2STR(MQRC_DATA_TRUNCATED            )
		MQCONST2STR(MQRC_ZERO_LENGTH               )
		MQCONST2STR(MQRC_NEGATIVE_LENGTH           )
		MQCONST2STR(MQRC_NEGATIVE_OFFSET           )
		MQCONST2STR(MQRC_INCONSISTENT_FORMAT       )
		MQCONST2STR(MQRC_INCONSISTENT_OBJECT_STATE )
		MQCONST2STR(MQRC_CONTEXT_OBJECT_NOT_VALID  )
		MQCONST2STR(MQRC_CONTEXT_OPEN_ERROR        )
		MQCONST2STR(MQRC_STRUC_LENGTH_ERROR        )
		MQCONST2STR(MQRC_NOT_CONNECTED             )
		MQCONST2STR(MQRC_NOT_OPEN                  )
		MQCONST2STR(MQRC_DISTRIBUTION_LIST_EMPTY   )
		MQCONST2STR(MQRC_INCONSISTENT_OPEN_OPTIONS )
		MQCONST2STR(MQRC_WRONG_VERSION             )
		MQCONST2STR(MQRC_REFERENCE_ERROR           )
	)
;

Dictionary namelistDictionary = Dictionary()
	(MQCA_ALTERATION_DATE)
	(MQCA_ALTERATION_TIME)
	(MQIA_NAME_COUNT, "NameCount")
	(MQCA_NAMELIST_DESC, "NamelistDesc")
	(MQCA_NAMELIST_NAME)
	(MQIA_NAMELIST_TYPE, "NamelistType", DisplayMapInitializer
		(MQNT_NONE, "None")
		(MQNT_Q, "Queue")
		(MQNT_CLUSTER, "Cluster")
		(MQNT_AUTH_INFO, "AuthInfo")
	)
	(MQCA_NAMES, "Names")
	(MQIA_QSG_DISP)
;

Dictionary processDictionary = Dictionary()
	(MQCA_ALTERATION_DATE)
	(MQCA_ALTERATION_TIME)
	(MQCA_APPL_ID, "ApplId")
	(MQIA_APPL_TYPE)
	(MQCA_ENV_DATA, "EnvData")
	(MQCA_PROCESS_DESC, "ProcessDesc")
	(MQCA_PROCESS_NAME)
	(MQIA_QSG_DISP)
	(MQCA_USER_DATA, "UserData")
	// Extended Response
	(MQBACF_RESPONSE_ID)
	(MQCACF_RESPONSE_Q_MGR_NAME)
;

Dictionary serviceDictionary = Dictionary()
	(MQCA_ALTERATION_DATE)
	(MQCA_ALTERATION_TIME)
	(MQCA_SERVICE_DESC, "ServiceDesc")
	(MQCA_SERVICE_NAME, "ServiceName")
	(MQIA_SERVICE_TYPE, "ServiceType", DisplayMapInitializer
		(MQSVC_TYPE_SERVER, "Server")
		(MQSVC_TYPE_COMMAND, "Command")
	)
	(MQCA_SERVICE_START_ARGS, "StartArguments")
	(MQCA_SERVICE_START_COMMAND, "StartCommand")
	(MQIA_SERVICE_CONTROL, "StartMode", DisplayMapInitializer
		(MQSVC_CONTROL_MANUAL, "Manual")
		(MQSVC_CONTROL_Q_MGR, "Qmgr")
		(MQSVC_CONTROL_Q_MGR_START, "QmgrStart")
	)
	(MQCA_STDERR_DESTINATION, "StderrDestination")
	(MQCA_STDOUT_DESTINATION, "StdoutDestination")
	(MQCA_SERVICE_STOP_ARGS, "StopArguments")
	(MQCA_SERVICE_STOP_COMMAND, "StopCommand")
	// Extended Response
	(MQBACF_RESPONSE_ID)
	(MQCACF_RESPONSE_Q_MGR_NAME)
;

Dictionary authenticationInformationDictionary = Dictionary()
	(MQCA_ALTERATION_DATE)
	(MQCA_ALTERATION_TIME)
	(MQCA_AUTH_INFO_CONN_NAME, "AuthInfoConnName")
	(MQCA_AUTH_INFO_DESC, "AuthInfoDesc")
	(MQCA_AUTH_INFO_NAME, "AuthInfoName")
	(MQIA_AUTH_INFO_TYPE, "AuthInfoType", DisplayMapInitializer
		(MQAIT_ALL, "All")
		(MQAIT_CRL_LDAP, "CRL LDAP")
		(MQAIT_OCSP, "OCSP")
	)
	(MQCA_LDAP_PASSWORD, "LDAPPassword")
	(MQCA_LDAP_USER_NAME, "LDAPUserName")
	(MQCA_AUTH_INFO_OCSP_URL, "OCSPResponderURL")
	(MQIA_QSG_DISP)
	// Extended Response
	(MQBACF_RESPONSE_ID)
	(MQCACF_RESPONSE_Q_MGR_NAME)
;

Dictionary authorityRecordDictionary = Dictionary()
	(MQIACF_AUTHORIZATION_LIST, "AuthorizationList", DisplayMapInitializer
		(MQAUTH_NONE, "None")
		(MQAUTH_ALT_USER_AUTHORITY, "Alt User Authority")
		(MQAUTH_BROWSE, "Browse")
		(MQAUTH_CHANGE, "Change")
		(MQAUTH_CLEAR, "Clear")
		(MQAUTH_CONNECT, "Connect")
		(MQAUTH_CREATE, "Create")
		(MQAUTH_DELETE, "Delete")
		(MQAUTH_DISPLAY, "Display")
		(MQAUTH_INPUT, "Input")
		(MQAUTH_INQUIRE, "Inquire")
		(MQAUTH_OUTPUT, "Output")
		(MQAUTH_PASS_ALL_CONTEXT, "Pass All Context")
		(MQAUTH_PASS_IDENTITY_CONTEXT, "Pass Identity Context")
		(MQAUTH_SET, "Set")
		(MQAUTH_SET_ALL_CONTEXT, "Set All Context")
		(MQAUTH_SET_IDENTITY_CONTEXT, "Set Identity Context")
		(MQAUTH_CONTROL, "Control")
		(MQAUTH_CONTROL_EXTENDED, "Control Extended")
		(MQAUTH_PUBLISH, "Publish")
		(MQAUTH_SUBSCRIBE, "Subscribe")
		(MQAUTH_RESUME, "Resume")
		(MQAUTH_SYSTEM, "System")
		(MQAUTH_ALL, "All")
		(MQAUTH_ALL_ADMIN, "All Admin")
		(MQAUTH_ALL_MQI, "All MQI")
	)
	(MQCACF_ENTITY_NAME, "EntityName")
	(MQIACF_ENTITY_TYPE, "EntityType", DisplayMapInitializer
		(MQZAET_GROUP, "Group")
		(MQZAET_PRINCIPAL, "Principal")
		(MQZAET_UNKNOWN, "Unknown")
	)
	(MQIACF_OBJECT_TYPE)
	(MQIACF_AUTH_OPTIONS, "Options")
	(MQCACF_AUTH_PROFILE_NAME, "ProfileName")
	(MQCA_Q_MGR_NAME)
	// Extended Response
	(MQBACF_RESPONSE_ID)
	(MQCACF_RESPONSE_Q_MGR_NAME)
;

Dictionary subDictionary = Dictionary()
	(MQCA_ALTERATION_DATE)
	(MQCA_ALTERATION_TIME)
	(MQCA_CREATION_DATE)
	(MQCA_CREATION_TIME)
	(MQCACF_DESTINATION, "Destination")
	(MQIACF_DESTINATION_CLASS, "DestinationClass", DisplayMapInitializer
		(MQDC_MANAGED, "Managed")
		(MQDC_PROVIDED, "Provided")
	)
	(MQBACF_DESTINATION_CORREL_ID, "DestinationCorrelId")
	(MQCACF_DESTINATION_Q_MGR, "DestionationQueueManager")
#ifdef MQIA_DISPLAY_TYPE
	(MQIA_DISPLAY_TYPE, "DisplayType", DisplayMapInitializer
		(MQDOPT_RESOLVED, "Resolved")
		(MQDOPT_DEFINED, "Defined")
	)
#endif
	(MQIACF_DURABLE_SUBSCRIPTION)
	(MQIACF_EXPIRY, "Expiry")
	(MQBACF_ACCOUNTING_TOKEN, "PublishedAccountingToken")
	(MQCACF_APPL_IDENTITY_DATA, "PublishedApplicationIdentityData")
	(MQIACF_PUB_PRIORITY, "PublishPriority")
	(MQIACF_PUBSUB_PROPERTIES, "PublishSubscribeProperties", DisplayMapInitializer
		(MQPSPROP_NONE, "None")
		(MQPSPROP_MSGPROP, "MsgProp")
		(MQPSPROP_COMPAT, "Compat")
		(MQPSPROP_RFH2, "RFH2")
	)
	(MQIACF_REQUEST_ONLY, "Requestonly", DisplayMapInitializer
		(MQRU_PUBLISH_ALL, "All")
		(MQRU_PUBLISH_ON_REQUEST, "On Request")
	)
	(MQCACF_SUB_SELECTOR, "Selector")
	(MQIACF_SELECTOR_TYPE, "SelectorType", DisplayMapInitializer
		(MQSELTYPE_NONE, "None")
		(MQSELTYPE_STANDARD, "Standard")
		(MQSELTYPE_EXTENDED, "Extended")
	)
	(MQBACF_SUB_ID, "SubId")
	(MQIACF_SUB_LEVEL, "SubLevel")
	(MQCACF_SUB_NAME)
	(MQIACF_SUBSCRIPTION_SCOPE, "SubscriptionScope", DisplayMapInitializer
		(MQTSCOPE_ALL, "All")
		(MQTSCOPE_QMGR, "QMgr")
	)
	(MQIACF_SUB_TYPE)
	(MQCACF_SUB_USER_ID, "SubscriptionUser")
	(MQCA_TOPIC_NAME)
	(MQCA_TOPIC_STRING)
	(MQCACF_SUB_USER_DATA, "UserData")
	(MQIACF_VARIABLE_USER_ID, "VariableUser")
	(MQIACF_WILDCARD_SCHEMA, "WildcardSchema", DisplayMapInitializer
		(MQWS_CHAR, "Char")
		(MQWS_TOPIC, "Topic")
	)
;

Dictionary subStatusDictionary = Dictionary()
	(MQBACF_CONNECTION_ID)
	(MQIACF_DURABLE_SUBSCRIPTION)
	(MQCACF_LAST_MSG_DATE)
	(MQCACF_LAST_MSG_TIME)
#ifdef MQIACF_MESSAGE_COUNT
	(MQIACF_MESSAGE_COUNT, "MessageCount")
#endif
	(MQIACF_PUBLISH_COUNT, "NumberMsgs")
	(MQCA_RESUME_DATE)
	(MQCA_RESUME_TIME)
	(MQBACF_SUB_ID)
	(MQCACF_SUB_NAME)
	(MQCACF_SUB_USER_ID)
	(MQIACF_SUB_TYPE)
	(MQCA_TOPIC_STRING)
#ifdef MQIACF_MCAST_REL_INDICATOR
	(MQIACF_MCAST_REL_INDICATOR, "MCastRelIndicator")
#endif
;

Dictionary authorityServiceDictionary = Dictionary()
	(MQIACF_INTERFACE_VERSION, "InterfaceVersion")
	(MQCACF_SERVICE_COMPONENT, "ServiceComponent")
	(MQIACF_USER_ID_SUPPORT, "UserIDSupport", DisplayMapInitializer
		(MQUIDSUPP_YES, "Yes")
		(MQUIDSUPP_NO, "No")
	)
;

Dictionary channelInitiatorDictionary = Dictionary()
	(MQIACH_ACTIVE_CHL, "ActiveChannels")
	(MQIACH_ACTIVE_CHL_MAX, "ActiveChannelsMax")
	(MQIACH_ACTIVE_CHL_PAUSED, "ActiveChannelsPaused")
	(MQIACH_ACTIVE_CHL_RETRY, "ActiveChannelsRetrying")
	(MQIACH_ACTIVE_CHL_STARTED, "ActiveChannelsStarted")
	(MQIACH_ACTIVE_CHL_STOPPED, "ActiveChannelsStopped")
	(MQIACH_ADAPS_MAX, "AdaptersMax")
	(MQIACH_ADAPS_STARTED, "AdaptersStarted")
	(MQIACF_CHINIT_STATUS)
	(MQIACH_CURRENT_CHL, "CurrentChannels")
	(MQIACH_CURRENT_CHL_LU62, "CurrentChannelsLU62")
	(MQIACH_CURRENT_CHL_MAX, "CurrentChannelsMax")
	(MQIACH_CURRENT_CHL_TCP, "CurrentChannelsLTCP")
	(MQIACH_DISPS_MAX, "DispatchersMax")
	(MQIACH_DISPS_STARTED, "DispatchersStarted")
	(MQIACH_SSLTASKS_MAX, "SSLTasksMax")
	(MQIACH_SSLTASKS_STARTED, "SSLTasksStarted")
	(MQCACH_TCP_NAME, "TCPName")
	(MQIACH_INBOUND_DISP, "InboundDisposition", DisplayMapInitializer
		(MQINBD_GROUP, "Group")
		(MQINBD_Q_MGR, "Qmgr")
	)
	(MQCACH_IP_ADDRESS)
	(MQIACH_LISTENER_STATUS)
	(MQCACH_LU_NAME, "LUName")
	(MQIACH_PORT_NUMBER, "Port")
	(MQIACH_XMIT_PROTOCOL_TYPE)
	// Extended Response
	(MQBACF_RESPONSE_ID)
	(MQCACF_RESPONSE_Q_MGR_NAME)
;

class MQDictionary : public Poco::Util::Application
{
public:

MQDictionary()
{
}

~MQDictionary()
{
}

void store(Poco::Data::Session& session, int oid, const std::string& name, const Dictionary& dict)
{
	static std::map<int, std::string> allAttributes;

	std::cout << "Inserting " << name << std::endl;
	session << "INSERT INTO objects VALUES (?, ?)", use(oid), useRef(name), now;

	typedef Poco::Tuple<int, std::string> Attribute;
	typedef std::map<int, Attribute> Attributes;
	Attributes attributes;

	typedef Poco::Tuple<int, int> ObjectAttribute;
	typedef std::vector<ObjectAttribute> ObjectAttributes;
	ObjectAttributes objectAttributes;

	std::map<MQLONG, std::string>::const_iterator it = dict.begin();
	for(; it != dict.end(); ++it)
	{
		objectAttributes.push_back(ObjectAttribute(oid, it->first));
		
		if ( it->second.empty() ) continue;
		// Empty attributes are ignored, we assume they are already defined ...

		// Already inserted skip it (we assume that display map and
		// name are defined on the first occurrence)

		if ( allAttributes.find(it->first) != allAttributes.end() ) continue;

		attributes.insert(std::make_pair(it->first, Attribute(it->first, it->second)));
		allAttributes.insert(std::make_pair(it->first, it->second));

		if ( dict.hasDisplayMap(it->first) )
		{
			typedef Poco::Tuple<int, int, std::string> Display;
			typedef std::vector<Display> Displays;
			Displays displays;

			const DisplayMap& displayMap = dict.getDisplayMap(it->first);
			for(DisplayMap::const_iterator itDsp = displayMap.begin(); itDsp != displayMap.end(); ++itDsp)
			{
				displays.push_back(Display(it->first, itDsp->first, itDsp->second));
			}
			std::cout << "Inserting Display Map for " << it->second << std::endl;
			session << "INSERT INTO displays(attribute_id, value, display) VALUES(?, ?, ?)", use(displays), now;
		}

		objectAttributes.push_back(ObjectAttribute(oid, it->first));
	}

	std::cout << "Insert Object Attributes" << std::endl;
	if ( objectAttributes.size() > 0 )
	{
		session << "INSERT INTO object_attributes(object_id, attribute_id) VALUES(?, ?)", use(objectAttributes), now;
	}
	else
	{
		std::cout << "No attributes attached to the objecttype " << name << ". Please check !!!" << std::endl;
	}
	
	std::cout << "Insert Attributes" << std::endl;
	if ( attributes.size() > 0 )
	{
		session << "INSERT INTO attributes(id, name) VALUES(?, ?)", use(attributes), now;
	}
	else
	{
		std::cout << "No new attributes found ..." << std::endl;
	}
}

int main(const std::vector<std::string>& args)
{
	Poco::Data::Session session(Poco::Data::SQLite::Connector::KEY, "mqweb.db");

	session << "DROP TABLE IF EXISTS objects", now;
	session << "DROP TABLE IF EXISTS attributes", now;
	session << "DROP TABLE IF EXISTS object_attributes", now;
	session << "DROP TABLE IF EXISTS displays", now;
	session << "CREATE TABLE IF NOT EXISTS objects (id INTEGER PRIMARY KEY, name VARCHAR)", now;
	session << "CREATE TABLE IF NOT EXISTS attributes (id INTEGER PRIMARY KEY, name VARCHAR)", now;
	session << "CREATE TABLE IF NOT EXISTS object_attributes (object_id INTEGER, attribute_id INTEGER)", now;
	session << "CREATE TABLE IF NOT EXISTS displays (attribute_id INTEGER, value INTEGER, display VARCHAR)", now;

	int oid = 0;
	store(session, ++oid, "QueueManager", queueManagerDictionary);
	store(session, ++oid, "QueueManagerStatus", queueManagerStatusDictionary);
	store(session, ++oid, "Queue", queueDictionary);
	store(session, ++oid, "QueueStatus", queueStatusDictionary);
	store(session, ++oid, "Channel", channelDictionary);
	store(session, ++oid, "ChannelStatus", channelStatusDictionary);
	store(session, ++oid, "ClusterQueueManager", clusterQueueManagerDictionary);
	store(session, ++oid, "Connection", connectionDictionary);
	store(session, ++oid, "Listener", listenerDictionary);
	store(session, ++oid, "ListenerStatus", listenerStatusDictionary);
	store(session, ++oid, "Topic", topicDictionary);
	store(session, ++oid, "TopicStatus", topicStatusDictionary);
	store(session, ++oid, "Event", eventDictionary);
	store(session, ++oid, "Reason", reasonDictionary);
	store(session, ++oid, "Namelist", namelistDictionary);
	store(session, ++oid, "Process", processDictionary);
	store(session, ++oid, "Service", serviceDictionary);
	store(session, ++oid, "AuthenticationInformation", authenticationInformationDictionary);
	store(session, ++oid, "AuthorityRecord", authorityRecordDictionary);
	store(session, ++oid, "Sub", subDictionary);
	store(session, ++oid, "SubStatus", subStatusDictionary);
	store(session, ++oid, "AuthorityService", authorityServiceDictionary);
	store(session, ++oid, "ChannelInitiator", channelInitiatorDictionary);
	return Application::EXIT_OK;
}

};

POCO_APP_MAIN(MQDictionary)
